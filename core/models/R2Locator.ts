/* tslint:disable */
/* eslint-disable */
/**
 * Komga API
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Location } from './Location';
import {
    LocationFromJSON,
    LocationFromJSONTyped,
    LocationToJSON,
} from './Location';
import type { Text } from './Text';
import {
    TextFromJSON,
    TextFromJSONTyped,
    TextToJSON,
} from './Text';

/**
 * 
 * @export
 * @interface R2Locator
 */
export interface R2Locator {
    /**
     * 
     * @type {string}
     * @memberof R2Locator
     */
    href: string;
    /**
     * 
     * @type {string}
     * @memberof R2Locator
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof R2Locator
     */
    title?: string;
    /**
     * 
     * @type {Location}
     * @memberof R2Locator
     */
    locations?: Location;
    /**
     * 
     * @type {Text}
     * @memberof R2Locator
     */
    text?: Text;
}

/**
 * Check if a given object implements the R2Locator interface.
 */
export function instanceOfR2Locator(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "href" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function R2LocatorFromJSON(json: any): R2Locator {
    return R2LocatorFromJSONTyped(json, false);
}

export function R2LocatorFromJSONTyped(json: any, ignoreDiscriminator: boolean): R2Locator {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'href': json['href'],
        'type': json['type'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'locations': !exists(json, 'locations') ? undefined : LocationFromJSON(json['locations']),
        'text': !exists(json, 'text') ? undefined : TextFromJSON(json['text']),
    };
}

export function R2LocatorToJSON(value?: R2Locator | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'href': value.href,
        'type': value.type,
        'title': value.title,
        'locations': LocationToJSON(value.locations),
        'text': TextToJSON(value.text),
    };
}

