/* tslint:disable */
/* eslint-disable */
/**
 * Komga API
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PageDto } from './PageDto';
import {
    PageDtoFromJSON,
    PageDtoFromJSONTyped,
    PageDtoToJSON,
} from './PageDto';

/**
 * 
 * @export
 * @interface TransientBookDto
 */
export interface TransientBookDto {
    /**
     * 
     * @type {string}
     * @memberof TransientBookDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof TransientBookDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TransientBookDto
     */
    url: string;
    /**
     * 
     * @type {Date}
     * @memberof TransientBookDto
     */
    fileLastModified: Date;
    /**
     * 
     * @type {number}
     * @memberof TransientBookDto
     */
    sizeBytes: number;
    /**
     * 
     * @type {string}
     * @memberof TransientBookDto
     */
    size: string;
    /**
     * 
     * @type {string}
     * @memberof TransientBookDto
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof TransientBookDto
     */
    mediaType: string;
    /**
     * 
     * @type {Array<PageDto>}
     * @memberof TransientBookDto
     */
    pages: Array<PageDto>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TransientBookDto
     */
    files: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TransientBookDto
     */
    comment: string;
    /**
     * 
     * @type {number}
     * @memberof TransientBookDto
     */
    number?: number;
    /**
     * 
     * @type {string}
     * @memberof TransientBookDto
     */
    seriesId?: string;
}

/**
 * Check if a given object implements the TransientBookDto interface.
 */
export function instanceOfTransientBookDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "url" in value;
    isInstance = isInstance && "fileLastModified" in value;
    isInstance = isInstance && "sizeBytes" in value;
    isInstance = isInstance && "size" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "mediaType" in value;
    isInstance = isInstance && "pages" in value;
    isInstance = isInstance && "files" in value;
    isInstance = isInstance && "comment" in value;

    return isInstance;
}

export function TransientBookDtoFromJSON(json: any): TransientBookDto {
    return TransientBookDtoFromJSONTyped(json, false);
}

export function TransientBookDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransientBookDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'url': json['url'],
        'fileLastModified': (new Date(json['fileLastModified'])),
        'sizeBytes': json['sizeBytes'],
        'size': json['size'],
        'status': json['status'],
        'mediaType': json['mediaType'],
        'pages': ((json['pages'] as Array<any>).map(PageDtoFromJSON)),
        'files': json['files'],
        'comment': json['comment'],
        'number': !exists(json, 'number') ? undefined : json['number'],
        'seriesId': !exists(json, 'seriesId') ? undefined : json['seriesId'],
    };
}

export function TransientBookDtoToJSON(value?: TransientBookDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'url': value.url,
        'fileLastModified': (value.fileLastModified.toISOString()),
        'sizeBytes': value.sizeBytes,
        'size': value.size,
        'status': value.status,
        'mediaType': value.mediaType,
        'pages': ((value.pages as Array<any>).map(PageDtoToJSON)),
        'files': value.files,
        'comment': value.comment,
        'number': value.number,
        'seriesId': value.seriesId,
    };
}

