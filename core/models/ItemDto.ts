/* tslint:disable */
/* eslint-disable */
/**
 * Komga API
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthorDto } from './AuthorDto';
import {
    AuthorDtoFromJSON,
    AuthorDtoFromJSONTyped,
    AuthorDtoToJSON,
} from './AuthorDto';
import type { KomgaExtensionDto } from './KomgaExtensionDto';
import {
    KomgaExtensionDtoFromJSON,
    KomgaExtensionDtoFromJSONTyped,
    KomgaExtensionDtoToJSON,
} from './KomgaExtensionDto';

/**
 * 
 * @export
 * @interface ItemDto
 */
export interface ItemDto {
    /**
     * 
     * @type {string}
     * @memberof ItemDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ItemDto
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemDto
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemDto
     */
    summary?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemDto
     */
    contentHtml?: string;
    /**
     * 
     * @type {Date}
     * @memberof ItemDto
     */
    dateModified?: Date;
    /**
     * 
     * @type {AuthorDto}
     * @memberof ItemDto
     */
    author?: AuthorDto;
    /**
     * 
     * @type {Set<string>}
     * @memberof ItemDto
     */
    tags: Set<string>;
    /**
     * 
     * @type {KomgaExtensionDto}
     * @memberof ItemDto
     */
    komga?: KomgaExtensionDto;
}

/**
 * Check if a given object implements the ItemDto interface.
 */
export function instanceOfItemDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "tags" in value;

    return isInstance;
}

export function ItemDtoFromJSON(json: any): ItemDto {
    return ItemDtoFromJSONTyped(json, false);
}

export function ItemDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'summary': !exists(json, 'summary') ? undefined : json['summary'],
        'contentHtml': !exists(json, 'content_html') ? undefined : json['content_html'],
        'dateModified': !exists(json, 'date_modified') ? undefined : (new Date(json['date_modified'])),
        'author': !exists(json, 'author') ? undefined : AuthorDtoFromJSON(json['author']),
        'tags': json['tags'],
        'komga': !exists(json, '_komga') ? undefined : KomgaExtensionDtoFromJSON(json['_komga']),
    };
}

export function ItemDtoToJSON(value?: ItemDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'url': value.url,
        'title': value.title,
        'summary': value.summary,
        'content_html': value.contentHtml,
        'date_modified': value.dateModified === undefined ? undefined : (value.dateModified.toISOString()),
        'author': AuthorDtoToJSON(value.author),
        'tags': Array.from(value.tags as Set<any>),
        '_komga': KomgaExtensionDtoToJSON(value.komga),
    };
}

