/* tslint:disable */
/* eslint-disable */
/**
 * Komga API
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LibraryCreationDto
 */
export interface LibraryCreationDto {
    /**
     * 
     * @type {string}
     * @memberof LibraryCreationDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof LibraryCreationDto
     */
    root: string;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    importComicInfoBook: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    importComicInfoSeries: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    importComicInfoCollection: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    importComicInfoReadList: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    importComicInfoSeriesAppendVolume: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    importEpubBook: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    importEpubSeries: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    importMylarSeries: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    importLocalArtwork: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    importBarcodeIsbn: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    scanForceModifiedTime: boolean;
    /**
     * 
     * @type {string}
     * @memberof LibraryCreationDto
     */
    scanInterval: LibraryCreationDtoScanIntervalEnum;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    scanOnStartup: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    scanCbx: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    scanPdf: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    scanEpub: boolean;
    /**
     * 
     * @type {Set<string>}
     * @memberof LibraryCreationDto
     */
    scanDirectoryExclusions: Set<string>;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    repairExtensions: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    convertToCbz: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    emptyTrashAfterScan: boolean;
    /**
     * 
     * @type {string}
     * @memberof LibraryCreationDto
     */
    seriesCover: LibraryCreationDtoSeriesCoverEnum;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    hashFiles: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    hashPages: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryCreationDto
     */
    analyzeDimensions: boolean;
    /**
     * 
     * @type {string}
     * @memberof LibraryCreationDto
     */
    oneshotsDirectory?: string;
}


/**
 * @export
 */
export const LibraryCreationDtoScanIntervalEnum = {
    Disabled: 'DISABLED',
    Hourly: 'HOURLY',
    Every6H: 'EVERY_6H',
    Every12H: 'EVERY_12H',
    Daily: 'DAILY',
    Weekly: 'WEEKLY'
} as const;
export type LibraryCreationDtoScanIntervalEnum = typeof LibraryCreationDtoScanIntervalEnum[keyof typeof LibraryCreationDtoScanIntervalEnum];

/**
 * @export
 */
export const LibraryCreationDtoSeriesCoverEnum = {
    First: 'FIRST',
    FirstUnreadOrFirst: 'FIRST_UNREAD_OR_FIRST',
    FirstUnreadOrLast: 'FIRST_UNREAD_OR_LAST',
    Last: 'LAST'
} as const;
export type LibraryCreationDtoSeriesCoverEnum = typeof LibraryCreationDtoSeriesCoverEnum[keyof typeof LibraryCreationDtoSeriesCoverEnum];


/**
 * Check if a given object implements the LibraryCreationDto interface.
 */
export function instanceOfLibraryCreationDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "root" in value;
    isInstance = isInstance && "importComicInfoBook" in value;
    isInstance = isInstance && "importComicInfoSeries" in value;
    isInstance = isInstance && "importComicInfoCollection" in value;
    isInstance = isInstance && "importComicInfoReadList" in value;
    isInstance = isInstance && "importComicInfoSeriesAppendVolume" in value;
    isInstance = isInstance && "importEpubBook" in value;
    isInstance = isInstance && "importEpubSeries" in value;
    isInstance = isInstance && "importMylarSeries" in value;
    isInstance = isInstance && "importLocalArtwork" in value;
    isInstance = isInstance && "importBarcodeIsbn" in value;
    isInstance = isInstance && "scanForceModifiedTime" in value;
    isInstance = isInstance && "scanInterval" in value;
    isInstance = isInstance && "scanOnStartup" in value;
    isInstance = isInstance && "scanCbx" in value;
    isInstance = isInstance && "scanPdf" in value;
    isInstance = isInstance && "scanEpub" in value;
    isInstance = isInstance && "scanDirectoryExclusions" in value;
    isInstance = isInstance && "repairExtensions" in value;
    isInstance = isInstance && "convertToCbz" in value;
    isInstance = isInstance && "emptyTrashAfterScan" in value;
    isInstance = isInstance && "seriesCover" in value;
    isInstance = isInstance && "hashFiles" in value;
    isInstance = isInstance && "hashPages" in value;
    isInstance = isInstance && "analyzeDimensions" in value;

    return isInstance;
}

export function LibraryCreationDtoFromJSON(json: any): LibraryCreationDto {
    return LibraryCreationDtoFromJSONTyped(json, false);
}

export function LibraryCreationDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): LibraryCreationDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'root': json['root'],
        'importComicInfoBook': json['importComicInfoBook'],
        'importComicInfoSeries': json['importComicInfoSeries'],
        'importComicInfoCollection': json['importComicInfoCollection'],
        'importComicInfoReadList': json['importComicInfoReadList'],
        'importComicInfoSeriesAppendVolume': json['importComicInfoSeriesAppendVolume'],
        'importEpubBook': json['importEpubBook'],
        'importEpubSeries': json['importEpubSeries'],
        'importMylarSeries': json['importMylarSeries'],
        'importLocalArtwork': json['importLocalArtwork'],
        'importBarcodeIsbn': json['importBarcodeIsbn'],
        'scanForceModifiedTime': json['scanForceModifiedTime'],
        'scanInterval': json['scanInterval'],
        'scanOnStartup': json['scanOnStartup'],
        'scanCbx': json['scanCbx'],
        'scanPdf': json['scanPdf'],
        'scanEpub': json['scanEpub'],
        'scanDirectoryExclusions': json['scanDirectoryExclusions'],
        'repairExtensions': json['repairExtensions'],
        'convertToCbz': json['convertToCbz'],
        'emptyTrashAfterScan': json['emptyTrashAfterScan'],
        'seriesCover': json['seriesCover'],
        'hashFiles': json['hashFiles'],
        'hashPages': json['hashPages'],
        'analyzeDimensions': json['analyzeDimensions'],
        'oneshotsDirectory': !exists(json, 'oneshotsDirectory') ? undefined : json['oneshotsDirectory'],
    };
}

export function LibraryCreationDtoToJSON(value?: LibraryCreationDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'root': value.root,
        'importComicInfoBook': value.importComicInfoBook,
        'importComicInfoSeries': value.importComicInfoSeries,
        'importComicInfoCollection': value.importComicInfoCollection,
        'importComicInfoReadList': value.importComicInfoReadList,
        'importComicInfoSeriesAppendVolume': value.importComicInfoSeriesAppendVolume,
        'importEpubBook': value.importEpubBook,
        'importEpubSeries': value.importEpubSeries,
        'importMylarSeries': value.importMylarSeries,
        'importLocalArtwork': value.importLocalArtwork,
        'importBarcodeIsbn': value.importBarcodeIsbn,
        'scanForceModifiedTime': value.scanForceModifiedTime,
        'scanInterval': value.scanInterval,
        'scanOnStartup': value.scanOnStartup,
        'scanCbx': value.scanCbx,
        'scanPdf': value.scanPdf,
        'scanEpub': value.scanEpub,
        'scanDirectoryExclusions': Array.from(value.scanDirectoryExclusions as Set<any>),
        'repairExtensions': value.repairExtensions,
        'convertToCbz': value.convertToCbz,
        'emptyTrashAfterScan': value.emptyTrashAfterScan,
        'seriesCover': value.seriesCover,
        'hashFiles': value.hashFiles,
        'hashPages': value.hashPages,
        'analyzeDimensions': value.analyzeDimensions,
        'oneshotsDirectory': value.oneshotsDirectory,
    };
}

