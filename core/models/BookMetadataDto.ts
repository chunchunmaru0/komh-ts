/* tslint:disable */
/* eslint-disable */
/**
 * Komga API
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthorDto } from './AuthorDto';
import {
    AuthorDtoFromJSON,
    AuthorDtoFromJSONTyped,
    AuthorDtoToJSON,
} from './AuthorDto';
import type { WebLinkDto } from './WebLinkDto';
import {
    WebLinkDtoFromJSON,
    WebLinkDtoFromJSONTyped,
    WebLinkDtoToJSON,
} from './WebLinkDto';

/**
 * 
 * @export
 * @interface BookMetadataDto
 */
export interface BookMetadataDto {
    /**
     * 
     * @type {string}
     * @memberof BookMetadataDto
     */
    title: string;
    /**
     * 
     * @type {boolean}
     * @memberof BookMetadataDto
     */
    titleLock: boolean;
    /**
     * 
     * @type {string}
     * @memberof BookMetadataDto
     */
    summary: string;
    /**
     * 
     * @type {boolean}
     * @memberof BookMetadataDto
     */
    summaryLock: boolean;
    /**
     * 
     * @type {string}
     * @memberof BookMetadataDto
     */
    number: string;
    /**
     * 
     * @type {boolean}
     * @memberof BookMetadataDto
     */
    numberLock: boolean;
    /**
     * 
     * @type {number}
     * @memberof BookMetadataDto
     */
    numberSort: number;
    /**
     * 
     * @type {boolean}
     * @memberof BookMetadataDto
     */
    numberSortLock: boolean;
    /**
     * 
     * @type {Date}
     * @memberof BookMetadataDto
     */
    releaseDate?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof BookMetadataDto
     */
    releaseDateLock: boolean;
    /**
     * 
     * @type {Array<AuthorDto>}
     * @memberof BookMetadataDto
     */
    authors: Array<AuthorDto>;
    /**
     * 
     * @type {boolean}
     * @memberof BookMetadataDto
     */
    authorsLock: boolean;
    /**
     * 
     * @type {Set<string>}
     * @memberof BookMetadataDto
     */
    tags: Set<string>;
    /**
     * 
     * @type {boolean}
     * @memberof BookMetadataDto
     */
    tagsLock: boolean;
    /**
     * 
     * @type {string}
     * @memberof BookMetadataDto
     */
    isbn: string;
    /**
     * 
     * @type {boolean}
     * @memberof BookMetadataDto
     */
    isbnLock: boolean;
    /**
     * 
     * @type {Array<WebLinkDto>}
     * @memberof BookMetadataDto
     */
    links: Array<WebLinkDto>;
    /**
     * 
     * @type {boolean}
     * @memberof BookMetadataDto
     */
    linksLock: boolean;
    /**
     * 
     * @type {Date}
     * @memberof BookMetadataDto
     */
    created: Date;
    /**
     * 
     * @type {Date}
     * @memberof BookMetadataDto
     */
    lastModified: Date;
}

/**
 * Check if a given object implements the BookMetadataDto interface.
 */
export function instanceOfBookMetadataDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "titleLock" in value;
    isInstance = isInstance && "summary" in value;
    isInstance = isInstance && "summaryLock" in value;
    isInstance = isInstance && "number" in value;
    isInstance = isInstance && "numberLock" in value;
    isInstance = isInstance && "numberSort" in value;
    isInstance = isInstance && "numberSortLock" in value;
    isInstance = isInstance && "releaseDateLock" in value;
    isInstance = isInstance && "authors" in value;
    isInstance = isInstance && "authorsLock" in value;
    isInstance = isInstance && "tags" in value;
    isInstance = isInstance && "tagsLock" in value;
    isInstance = isInstance && "isbn" in value;
    isInstance = isInstance && "isbnLock" in value;
    isInstance = isInstance && "links" in value;
    isInstance = isInstance && "linksLock" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "lastModified" in value;

    return isInstance;
}

export function BookMetadataDtoFromJSON(json: any): BookMetadataDto {
    return BookMetadataDtoFromJSONTyped(json, false);
}

export function BookMetadataDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BookMetadataDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'title': json['title'],
        'titleLock': json['titleLock'],
        'summary': json['summary'],
        'summaryLock': json['summaryLock'],
        'number': json['number'],
        'numberLock': json['numberLock'],
        'numberSort': json['numberSort'],
        'numberSortLock': json['numberSortLock'],
        'releaseDate': !exists(json, 'releaseDate') ? undefined : (new Date(json['releaseDate'])),
        'releaseDateLock': json['releaseDateLock'],
        'authors': ((json['authors'] as Array<any>).map(AuthorDtoFromJSON)),
        'authorsLock': json['authorsLock'],
        'tags': json['tags'],
        'tagsLock': json['tagsLock'],
        'isbn': json['isbn'],
        'isbnLock': json['isbnLock'],
        'links': ((json['links'] as Array<any>).map(WebLinkDtoFromJSON)),
        'linksLock': json['linksLock'],
        'created': (new Date(json['created'])),
        'lastModified': (new Date(json['lastModified'])),
    };
}

export function BookMetadataDtoToJSON(value?: BookMetadataDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'title': value.title,
        'titleLock': value.titleLock,
        'summary': value.summary,
        'summaryLock': value.summaryLock,
        'number': value.number,
        'numberLock': value.numberLock,
        'numberSort': value.numberSort,
        'numberSortLock': value.numberSortLock,
        'releaseDate': value.releaseDate === undefined ? undefined : (value.releaseDate.toISOString().substring(0,10)),
        'releaseDateLock': value.releaseDateLock,
        'authors': ((value.authors as Array<any>).map(AuthorDtoToJSON)),
        'authorsLock': value.authorsLock,
        'tags': Array.from(value.tags as Set<any>),
        'tagsLock': value.tagsLock,
        'isbn': value.isbn,
        'isbnLock': value.isbnLock,
        'links': ((value.links as Array<any>).map(WebLinkDtoToJSON)),
        'linksLock': value.linksLock,
        'created': (value.created.toISOString()),
        'lastModified': (value.lastModified.toISOString()),
    };
}

