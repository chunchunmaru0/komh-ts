/* tslint:disable */
/* eslint-disable */
/**
 * Komga API
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AgeRestrictionDto } from './AgeRestrictionDto';
import {
    AgeRestrictionDtoFromJSON,
    AgeRestrictionDtoFromJSONTyped,
    AgeRestrictionDtoToJSON,
} from './AgeRestrictionDto';

/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    email: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof UserDto
     */
    roles: Set<string>;
    /**
     * 
     * @type {boolean}
     * @memberof UserDto
     */
    sharedAllLibraries: boolean;
    /**
     * 
     * @type {Set<string>}
     * @memberof UserDto
     */
    sharedLibrariesIds: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof UserDto
     */
    labelsAllow: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof UserDto
     */
    labelsExclude: Set<string>;
    /**
     * 
     * @type {AgeRestrictionDto}
     * @memberof UserDto
     */
    ageRestriction?: AgeRestrictionDto;
}

/**
 * Check if a given object implements the UserDto interface.
 */
export function instanceOfUserDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "roles" in value;
    isInstance = isInstance && "sharedAllLibraries" in value;
    isInstance = isInstance && "sharedLibrariesIds" in value;
    isInstance = isInstance && "labelsAllow" in value;
    isInstance = isInstance && "labelsExclude" in value;

    return isInstance;
}

export function UserDtoFromJSON(json: any): UserDto {
    return UserDtoFromJSONTyped(json, false);
}

export function UserDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'email': json['email'],
        'roles': json['roles'],
        'sharedAllLibraries': json['sharedAllLibraries'],
        'sharedLibrariesIds': json['sharedLibrariesIds'],
        'labelsAllow': json['labelsAllow'],
        'labelsExclude': json['labelsExclude'],
        'ageRestriction': !exists(json, 'ageRestriction') ? undefined : AgeRestrictionDtoFromJSON(json['ageRestriction']),
    };
}

export function UserDtoToJSON(value?: UserDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'email': value.email,
        'roles': Array.from(value.roles as Set<any>),
        'sharedAllLibraries': value.sharedAllLibraries,
        'sharedLibrariesIds': Array.from(value.sharedLibrariesIds as Set<any>),
        'labelsAllow': Array.from(value.labelsAllow as Set<any>),
        'labelsExclude': Array.from(value.labelsExclude as Set<any>),
        'ageRestriction': AgeRestrictionDtoToJSON(value.ageRestriction),
    };
}

