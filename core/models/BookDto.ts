/* tslint:disable */
/* eslint-disable */
/**
 * Komga API
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BookMetadataDto } from './BookMetadataDto';
import {
    BookMetadataDtoFromJSON,
    BookMetadataDtoFromJSONTyped,
    BookMetadataDtoToJSON,
} from './BookMetadataDto';
import type { MediaDto } from './MediaDto';
import {
    MediaDtoFromJSON,
    MediaDtoFromJSONTyped,
    MediaDtoToJSON,
} from './MediaDto';
import type { ReadProgressDto } from './ReadProgressDto';
import {
    ReadProgressDtoFromJSON,
    ReadProgressDtoFromJSONTyped,
    ReadProgressDtoToJSON,
} from './ReadProgressDto';

/**
 * 
 * @export
 * @interface BookDto
 */
export interface BookDto {
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    seriesId: string;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    seriesTitle: string;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    libraryId: string;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    url: string;
    /**
     * 
     * @type {number}
     * @memberof BookDto
     */
    number: number;
    /**
     * 
     * @type {Date}
     * @memberof BookDto
     */
    created: Date;
    /**
     * 
     * @type {Date}
     * @memberof BookDto
     */
    lastModified: Date;
    /**
     * 
     * @type {Date}
     * @memberof BookDto
     */
    fileLastModified: Date;
    /**
     * 
     * @type {number}
     * @memberof BookDto
     */
    sizeBytes: number;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    size: string;
    /**
     * 
     * @type {MediaDto}
     * @memberof BookDto
     */
    media: MediaDto;
    /**
     * 
     * @type {BookMetadataDto}
     * @memberof BookDto
     */
    metadata: BookMetadataDto;
    /**
     * 
     * @type {ReadProgressDto}
     * @memberof BookDto
     */
    readProgress?: ReadProgressDto;
    /**
     * 
     * @type {boolean}
     * @memberof BookDto
     */
    deleted: boolean;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    fileHash: string;
    /**
     * 
     * @type {boolean}
     * @memberof BookDto
     */
    oneshot: boolean;
}

/**
 * Check if a given object implements the BookDto interface.
 */
export function instanceOfBookDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "seriesId" in value;
    isInstance = isInstance && "seriesTitle" in value;
    isInstance = isInstance && "libraryId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "url" in value;
    isInstance = isInstance && "number" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "lastModified" in value;
    isInstance = isInstance && "fileLastModified" in value;
    isInstance = isInstance && "sizeBytes" in value;
    isInstance = isInstance && "size" in value;
    isInstance = isInstance && "media" in value;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "deleted" in value;
    isInstance = isInstance && "fileHash" in value;
    isInstance = isInstance && "oneshot" in value;

    return isInstance;
}

export function BookDtoFromJSON(json: any): BookDto {
    return BookDtoFromJSONTyped(json, false);
}

export function BookDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BookDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'seriesId': json['seriesId'],
        'seriesTitle': json['seriesTitle'],
        'libraryId': json['libraryId'],
        'name': json['name'],
        'url': json['url'],
        'number': json['number'],
        'created': (new Date(json['created'])),
        'lastModified': (new Date(json['lastModified'])),
        'fileLastModified': (new Date(json['fileLastModified'])),
        'sizeBytes': json['sizeBytes'],
        'size': json['size'],
        'media': MediaDtoFromJSON(json['media']),
        'metadata': BookMetadataDtoFromJSON(json['metadata']),
        'readProgress': !exists(json, 'readProgress') ? undefined : ReadProgressDtoFromJSON(json['readProgress']),
        'deleted': json['deleted'],
        'fileHash': json['fileHash'],
        'oneshot': json['oneshot'],
    };
}

export function BookDtoToJSON(value?: BookDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'seriesId': value.seriesId,
        'seriesTitle': value.seriesTitle,
        'libraryId': value.libraryId,
        'name': value.name,
        'url': value.url,
        'number': value.number,
        'created': (value.created.toISOString()),
        'lastModified': (value.lastModified.toISOString()),
        'fileLastModified': (value.fileLastModified.toISOString()),
        'sizeBytes': value.sizeBytes,
        'size': value.size,
        'media': MediaDtoToJSON(value.media),
        'metadata': BookMetadataDtoToJSON(value.metadata),
        'readProgress': ReadProgressDtoToJSON(value.readProgress),
        'deleted': value.deleted,
        'fileHash': value.fileHash,
        'oneshot': value.oneshot,
    };
}

