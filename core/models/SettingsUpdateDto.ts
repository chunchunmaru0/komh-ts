/* tslint:disable */
/* eslint-disable */
/**
 * Komga API
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SettingsUpdateDto
 */
export interface SettingsUpdateDto {
    /**
     * 
     * @type {boolean}
     * @memberof SettingsUpdateDto
     */
    deleteEmptyCollections?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SettingsUpdateDto
     */
    deleteEmptyReadLists?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SettingsUpdateDto
     */
    rememberMeDurationDays?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SettingsUpdateDto
     */
    renewRememberMeKey?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SettingsUpdateDto
     */
    thumbnailSize?: SettingsUpdateDtoThumbnailSizeEnum;
    /**
     * 
     * @type {number}
     * @memberof SettingsUpdateDto
     */
    taskPoolSize?: number;
    /**
     * 
     * @type {number}
     * @memberof SettingsUpdateDto
     */
    serverPort?: number;
    /**
     * 
     * @type {string}
     * @memberof SettingsUpdateDto
     */
    serverContextPath?: string;
}


/**
 * @export
 */
export const SettingsUpdateDtoThumbnailSizeEnum = {
    Default: 'DEFAULT',
    Medium: 'MEDIUM',
    Large: 'LARGE',
    Xlarge: 'XLARGE'
} as const;
export type SettingsUpdateDtoThumbnailSizeEnum = typeof SettingsUpdateDtoThumbnailSizeEnum[keyof typeof SettingsUpdateDtoThumbnailSizeEnum];


/**
 * Check if a given object implements the SettingsUpdateDto interface.
 */
export function instanceOfSettingsUpdateDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SettingsUpdateDtoFromJSON(json: any): SettingsUpdateDto {
    return SettingsUpdateDtoFromJSONTyped(json, false);
}

export function SettingsUpdateDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SettingsUpdateDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'deleteEmptyCollections': !exists(json, 'deleteEmptyCollections') ? undefined : json['deleteEmptyCollections'],
        'deleteEmptyReadLists': !exists(json, 'deleteEmptyReadLists') ? undefined : json['deleteEmptyReadLists'],
        'rememberMeDurationDays': !exists(json, 'rememberMeDurationDays') ? undefined : json['rememberMeDurationDays'],
        'renewRememberMeKey': !exists(json, 'renewRememberMeKey') ? undefined : json['renewRememberMeKey'],
        'thumbnailSize': !exists(json, 'thumbnailSize') ? undefined : json['thumbnailSize'],
        'taskPoolSize': !exists(json, 'taskPoolSize') ? undefined : json['taskPoolSize'],
        'serverPort': !exists(json, 'serverPort') ? undefined : json['serverPort'],
        'serverContextPath': !exists(json, 'serverContextPath') ? undefined : json['serverContextPath'],
    };
}

export function SettingsUpdateDtoToJSON(value?: SettingsUpdateDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'deleteEmptyCollections': value.deleteEmptyCollections,
        'deleteEmptyReadLists': value.deleteEmptyReadLists,
        'rememberMeDurationDays': value.rememberMeDurationDays,
        'renewRememberMeKey': value.renewRememberMeKey,
        'thumbnailSize': value.thumbnailSize,
        'taskPoolSize': value.taskPoolSize,
        'serverPort': value.serverPort,
        'serverContextPath': value.serverContextPath,
    };
}

