/* tslint:disable */
/* eslint-disable */
/**
 * Komga API
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Fields to update. You can omit fields you don't want to update.
 * @export
 * @interface LibraryUpdateDto
 */
export interface LibraryUpdateDto {
    /**
     * 
     * @type {string}
     * @memberof LibraryUpdateDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof LibraryUpdateDto
     */
    root?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    importComicInfoBook?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    importComicInfoSeries?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    importComicInfoCollection?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    importComicInfoReadList?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    importComicInfoSeriesAppendVolume?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    importEpubBook?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    importEpubSeries?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    importMylarSeries?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    importLocalArtwork?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    importBarcodeIsbn?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    scanForceModifiedTime?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LibraryUpdateDto
     */
    scanInterval?: LibraryUpdateDtoScanIntervalEnum;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    scanOnStartup?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    scanCbx?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    scanPdf?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    scanEpub?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    repairExtensions?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    convertToCbz?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    emptyTrashAfterScan?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LibraryUpdateDto
     */
    seriesCover?: LibraryUpdateDtoSeriesCoverEnum;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    hashFiles?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    hashPages?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LibraryUpdateDto
     */
    analyzeDimensions?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LibraryUpdateDto
     */
    oneshotsDirectory?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof LibraryUpdateDto
     */
    scanDirectoryExclusions?: Set<string>;
}


/**
 * @export
 */
export const LibraryUpdateDtoScanIntervalEnum = {
    Disabled: 'DISABLED',
    Hourly: 'HOURLY',
    Every6H: 'EVERY_6H',
    Every12H: 'EVERY_12H',
    Daily: 'DAILY',
    Weekly: 'WEEKLY'
} as const;
export type LibraryUpdateDtoScanIntervalEnum = typeof LibraryUpdateDtoScanIntervalEnum[keyof typeof LibraryUpdateDtoScanIntervalEnum];

/**
 * @export
 */
export const LibraryUpdateDtoSeriesCoverEnum = {
    First: 'FIRST',
    FirstUnreadOrFirst: 'FIRST_UNREAD_OR_FIRST',
    FirstUnreadOrLast: 'FIRST_UNREAD_OR_LAST',
    Last: 'LAST'
} as const;
export type LibraryUpdateDtoSeriesCoverEnum = typeof LibraryUpdateDtoSeriesCoverEnum[keyof typeof LibraryUpdateDtoSeriesCoverEnum];


/**
 * Check if a given object implements the LibraryUpdateDto interface.
 */
export function instanceOfLibraryUpdateDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LibraryUpdateDtoFromJSON(json: any): LibraryUpdateDto {
    return LibraryUpdateDtoFromJSONTyped(json, false);
}

export function LibraryUpdateDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): LibraryUpdateDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'root': !exists(json, 'root') ? undefined : json['root'],
        'importComicInfoBook': !exists(json, 'importComicInfoBook') ? undefined : json['importComicInfoBook'],
        'importComicInfoSeries': !exists(json, 'importComicInfoSeries') ? undefined : json['importComicInfoSeries'],
        'importComicInfoCollection': !exists(json, 'importComicInfoCollection') ? undefined : json['importComicInfoCollection'],
        'importComicInfoReadList': !exists(json, 'importComicInfoReadList') ? undefined : json['importComicInfoReadList'],
        'importComicInfoSeriesAppendVolume': !exists(json, 'importComicInfoSeriesAppendVolume') ? undefined : json['importComicInfoSeriesAppendVolume'],
        'importEpubBook': !exists(json, 'importEpubBook') ? undefined : json['importEpubBook'],
        'importEpubSeries': !exists(json, 'importEpubSeries') ? undefined : json['importEpubSeries'],
        'importMylarSeries': !exists(json, 'importMylarSeries') ? undefined : json['importMylarSeries'],
        'importLocalArtwork': !exists(json, 'importLocalArtwork') ? undefined : json['importLocalArtwork'],
        'importBarcodeIsbn': !exists(json, 'importBarcodeIsbn') ? undefined : json['importBarcodeIsbn'],
        'scanForceModifiedTime': !exists(json, 'scanForceModifiedTime') ? undefined : json['scanForceModifiedTime'],
        'scanInterval': !exists(json, 'scanInterval') ? undefined : json['scanInterval'],
        'scanOnStartup': !exists(json, 'scanOnStartup') ? undefined : json['scanOnStartup'],
        'scanCbx': !exists(json, 'scanCbx') ? undefined : json['scanCbx'],
        'scanPdf': !exists(json, 'scanPdf') ? undefined : json['scanPdf'],
        'scanEpub': !exists(json, 'scanEpub') ? undefined : json['scanEpub'],
        'repairExtensions': !exists(json, 'repairExtensions') ? undefined : json['repairExtensions'],
        'convertToCbz': !exists(json, 'convertToCbz') ? undefined : json['convertToCbz'],
        'emptyTrashAfterScan': !exists(json, 'emptyTrashAfterScan') ? undefined : json['emptyTrashAfterScan'],
        'seriesCover': !exists(json, 'seriesCover') ? undefined : json['seriesCover'],
        'hashFiles': !exists(json, 'hashFiles') ? undefined : json['hashFiles'],
        'hashPages': !exists(json, 'hashPages') ? undefined : json['hashPages'],
        'analyzeDimensions': !exists(json, 'analyzeDimensions') ? undefined : json['analyzeDimensions'],
        'oneshotsDirectory': !exists(json, 'oneshotsDirectory') ? undefined : json['oneshotsDirectory'],
        'scanDirectoryExclusions': !exists(json, 'scanDirectoryExclusions') ? undefined : json['scanDirectoryExclusions'],
    };
}

export function LibraryUpdateDtoToJSON(value?: LibraryUpdateDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'root': value.root,
        'importComicInfoBook': value.importComicInfoBook,
        'importComicInfoSeries': value.importComicInfoSeries,
        'importComicInfoCollection': value.importComicInfoCollection,
        'importComicInfoReadList': value.importComicInfoReadList,
        'importComicInfoSeriesAppendVolume': value.importComicInfoSeriesAppendVolume,
        'importEpubBook': value.importEpubBook,
        'importEpubSeries': value.importEpubSeries,
        'importMylarSeries': value.importMylarSeries,
        'importLocalArtwork': value.importLocalArtwork,
        'importBarcodeIsbn': value.importBarcodeIsbn,
        'scanForceModifiedTime': value.scanForceModifiedTime,
        'scanInterval': value.scanInterval,
        'scanOnStartup': value.scanOnStartup,
        'scanCbx': value.scanCbx,
        'scanPdf': value.scanPdf,
        'scanEpub': value.scanEpub,
        'repairExtensions': value.repairExtensions,
        'convertToCbz': value.convertToCbz,
        'emptyTrashAfterScan': value.emptyTrashAfterScan,
        'seriesCover': value.seriesCover,
        'hashFiles': value.hashFiles,
        'hashPages': value.hashPages,
        'analyzeDimensions': value.analyzeDimensions,
        'oneshotsDirectory': value.oneshotsDirectory,
        'scanDirectoryExclusions': value.scanDirectoryExclusions === undefined ? undefined : Array.from(value.scanDirectoryExclusions as Set<any>),
    };
}

