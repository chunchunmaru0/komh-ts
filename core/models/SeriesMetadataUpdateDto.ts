/* tslint:disable */
/* eslint-disable */
/**
 * Komga API
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AlternateTitleUpdateDto } from './AlternateTitleUpdateDto';
import {
    AlternateTitleUpdateDtoFromJSON,
    AlternateTitleUpdateDtoFromJSONTyped,
    AlternateTitleUpdateDtoToJSON,
} from './AlternateTitleUpdateDto';
import type { WebLinkUpdateDto } from './WebLinkUpdateDto';
import {
    WebLinkUpdateDtoFromJSON,
    WebLinkUpdateDtoFromJSONTyped,
    WebLinkUpdateDtoToJSON,
} from './WebLinkUpdateDto';

/**
 * Metadata fields to update. Set a field to null to unset the metadata. You can omit fields you don't want to update.
 * @export
 * @interface SeriesMetadataUpdateDto
 */
export interface SeriesMetadataUpdateDto {
    /**
     * 
     * @type {string}
     * @memberof SeriesMetadataUpdateDto
     */
    status?: SeriesMetadataUpdateDtoStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof SeriesMetadataUpdateDto
     */
    statusLock?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SeriesMetadataUpdateDto
     */
    title?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SeriesMetadataUpdateDto
     */
    titleLock?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SeriesMetadataUpdateDto
     */
    titleSort?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SeriesMetadataUpdateDto
     */
    titleSortLock?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SeriesMetadataUpdateDto
     */
    summary?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SeriesMetadataUpdateDto
     */
    summaryLock?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SeriesMetadataUpdateDto
     */
    publisher?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SeriesMetadataUpdateDto
     */
    publisherLock?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SeriesMetadataUpdateDto
     */
    readingDirectionLock?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SeriesMetadataUpdateDto
     */
    ageRatingLock?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SeriesMetadataUpdateDto
     */
    language?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SeriesMetadataUpdateDto
     */
    languageLock?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SeriesMetadataUpdateDto
     */
    genresLock?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SeriesMetadataUpdateDto
     */
    tagsLock?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SeriesMetadataUpdateDto
     */
    totalBookCountLock?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SeriesMetadataUpdateDto
     */
    sharingLabelsLock?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SeriesMetadataUpdateDto
     */
    linksLock?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SeriesMetadataUpdateDto
     */
    alternateTitlesLock?: boolean;
    /**
     * 
     * @type {Set<string>}
     * @memberof SeriesMetadataUpdateDto
     */
    tags?: Set<string>;
    /**
     * 
     * @type {Array<WebLinkUpdateDto>}
     * @memberof SeriesMetadataUpdateDto
     */
    links?: Array<WebLinkUpdateDto>;
    /**
     * 
     * @type {string}
     * @memberof SeriesMetadataUpdateDto
     */
    readingDirection?: SeriesMetadataUpdateDtoReadingDirectionEnum;
    /**
     * 
     * @type {number}
     * @memberof SeriesMetadataUpdateDto
     */
    ageRating?: number;
    /**
     * 
     * @type {Set<string>}
     * @memberof SeriesMetadataUpdateDto
     */
    genres?: Set<string>;
    /**
     * 
     * @type {number}
     * @memberof SeriesMetadataUpdateDto
     */
    totalBookCount?: number;
    /**
     * 
     * @type {Set<string>}
     * @memberof SeriesMetadataUpdateDto
     */
    sharingLabels?: Set<string>;
    /**
     * 
     * @type {Array<AlternateTitleUpdateDto>}
     * @memberof SeriesMetadataUpdateDto
     */
    alternateTitles?: Array<AlternateTitleUpdateDto>;
}


/**
 * @export
 */
export const SeriesMetadataUpdateDtoStatusEnum = {
    Ended: 'ENDED',
    Ongoing: 'ONGOING',
    Abandoned: 'ABANDONED',
    Hiatus: 'HIATUS'
} as const;
export type SeriesMetadataUpdateDtoStatusEnum = typeof SeriesMetadataUpdateDtoStatusEnum[keyof typeof SeriesMetadataUpdateDtoStatusEnum];

/**
 * @export
 */
export const SeriesMetadataUpdateDtoReadingDirectionEnum = {
    LeftToRight: 'LEFT_TO_RIGHT',
    RightToLeft: 'RIGHT_TO_LEFT',
    Vertical: 'VERTICAL',
    Webtoon: 'WEBTOON'
} as const;
export type SeriesMetadataUpdateDtoReadingDirectionEnum = typeof SeriesMetadataUpdateDtoReadingDirectionEnum[keyof typeof SeriesMetadataUpdateDtoReadingDirectionEnum];


/**
 * Check if a given object implements the SeriesMetadataUpdateDto interface.
 */
export function instanceOfSeriesMetadataUpdateDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SeriesMetadataUpdateDtoFromJSON(json: any): SeriesMetadataUpdateDto {
    return SeriesMetadataUpdateDtoFromJSONTyped(json, false);
}

export function SeriesMetadataUpdateDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeriesMetadataUpdateDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'status': !exists(json, 'status') ? undefined : json['status'],
        'statusLock': !exists(json, 'statusLock') ? undefined : json['statusLock'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'titleLock': !exists(json, 'titleLock') ? undefined : json['titleLock'],
        'titleSort': !exists(json, 'titleSort') ? undefined : json['titleSort'],
        'titleSortLock': !exists(json, 'titleSortLock') ? undefined : json['titleSortLock'],
        'summary': !exists(json, 'summary') ? undefined : json['summary'],
        'summaryLock': !exists(json, 'summaryLock') ? undefined : json['summaryLock'],
        'publisher': !exists(json, 'publisher') ? undefined : json['publisher'],
        'publisherLock': !exists(json, 'publisherLock') ? undefined : json['publisherLock'],
        'readingDirectionLock': !exists(json, 'readingDirectionLock') ? undefined : json['readingDirectionLock'],
        'ageRatingLock': !exists(json, 'ageRatingLock') ? undefined : json['ageRatingLock'],
        'language': !exists(json, 'language') ? undefined : json['language'],
        'languageLock': !exists(json, 'languageLock') ? undefined : json['languageLock'],
        'genresLock': !exists(json, 'genresLock') ? undefined : json['genresLock'],
        'tagsLock': !exists(json, 'tagsLock') ? undefined : json['tagsLock'],
        'totalBookCountLock': !exists(json, 'totalBookCountLock') ? undefined : json['totalBookCountLock'],
        'sharingLabelsLock': !exists(json, 'sharingLabelsLock') ? undefined : json['sharingLabelsLock'],
        'linksLock': !exists(json, 'linksLock') ? undefined : json['linksLock'],
        'alternateTitlesLock': !exists(json, 'alternateTitlesLock') ? undefined : json['alternateTitlesLock'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(WebLinkUpdateDtoFromJSON)),
        'readingDirection': !exists(json, 'readingDirection') ? undefined : json['readingDirection'],
        'ageRating': !exists(json, 'ageRating') ? undefined : json['ageRating'],
        'genres': !exists(json, 'genres') ? undefined : json['genres'],
        'totalBookCount': !exists(json, 'totalBookCount') ? undefined : json['totalBookCount'],
        'sharingLabels': !exists(json, 'sharingLabels') ? undefined : json['sharingLabels'],
        'alternateTitles': !exists(json, 'alternateTitles') ? undefined : ((json['alternateTitles'] as Array<any>).map(AlternateTitleUpdateDtoFromJSON)),
    };
}

export function SeriesMetadataUpdateDtoToJSON(value?: SeriesMetadataUpdateDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'status': value.status,
        'statusLock': value.statusLock,
        'title': value.title,
        'titleLock': value.titleLock,
        'titleSort': value.titleSort,
        'titleSortLock': value.titleSortLock,
        'summary': value.summary,
        'summaryLock': value.summaryLock,
        'publisher': value.publisher,
        'publisherLock': value.publisherLock,
        'readingDirectionLock': value.readingDirectionLock,
        'ageRatingLock': value.ageRatingLock,
        'language': value.language,
        'languageLock': value.languageLock,
        'genresLock': value.genresLock,
        'tagsLock': value.tagsLock,
        'totalBookCountLock': value.totalBookCountLock,
        'sharingLabelsLock': value.sharingLabelsLock,
        'linksLock': value.linksLock,
        'alternateTitlesLock': value.alternateTitlesLock,
        'tags': value.tags === undefined ? undefined : Array.from(value.tags as Set<any>),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(WebLinkUpdateDtoToJSON)),
        'readingDirection': value.readingDirection,
        'ageRating': value.ageRating,
        'genres': value.genres === undefined ? undefined : Array.from(value.genres as Set<any>),
        'totalBookCount': value.totalBookCount,
        'sharingLabels': value.sharingLabels === undefined ? undefined : Array.from(value.sharingLabels as Set<any>),
        'alternateTitles': value.alternateTitles === undefined ? undefined : ((value.alternateTitles as Array<any>).map(AlternateTitleUpdateDtoToJSON)),
    };
}

