/* tslint:disable */
/* eslint-disable */
/**
 * Komga API
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReadListMatchDto } from './ReadListMatchDto';
import {
    ReadListMatchDtoFromJSON,
    ReadListMatchDtoFromJSONTyped,
    ReadListMatchDtoToJSON,
} from './ReadListMatchDto';
import type { ReadListRequestBookMatchesDto } from './ReadListRequestBookMatchesDto';
import {
    ReadListRequestBookMatchesDtoFromJSON,
    ReadListRequestBookMatchesDtoFromJSONTyped,
    ReadListRequestBookMatchesDtoToJSON,
} from './ReadListRequestBookMatchesDto';

/**
 * 
 * @export
 * @interface ReadListRequestMatchDto
 */
export interface ReadListRequestMatchDto {
    /**
     * 
     * @type {ReadListMatchDto}
     * @memberof ReadListRequestMatchDto
     */
    readListMatch: ReadListMatchDto;
    /**
     * 
     * @type {Array<ReadListRequestBookMatchesDto>}
     * @memberof ReadListRequestMatchDto
     */
    requests: Array<ReadListRequestBookMatchesDto>;
    /**
     * 
     * @type {string}
     * @memberof ReadListRequestMatchDto
     */
    errorCode: string;
}

/**
 * Check if a given object implements the ReadListRequestMatchDto interface.
 */
export function instanceOfReadListRequestMatchDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "readListMatch" in value;
    isInstance = isInstance && "requests" in value;
    isInstance = isInstance && "errorCode" in value;

    return isInstance;
}

export function ReadListRequestMatchDtoFromJSON(json: any): ReadListRequestMatchDto {
    return ReadListRequestMatchDtoFromJSONTyped(json, false);
}

export function ReadListRequestMatchDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReadListRequestMatchDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'readListMatch': ReadListMatchDtoFromJSON(json['readListMatch']),
        'requests': ((json['requests'] as Array<any>).map(ReadListRequestBookMatchesDtoFromJSON)),
        'errorCode': json['errorCode'],
    };
}

export function ReadListRequestMatchDtoToJSON(value?: ReadListRequestMatchDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'readListMatch': ReadListMatchDtoToJSON(value.readListMatch),
        'requests': ((value.requests as Array<any>).map(ReadListRequestBookMatchesDtoToJSON)),
        'errorCode': value.errorCode,
    };
}

