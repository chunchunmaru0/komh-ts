/* tslint:disable */
/* eslint-disable */
/**
 * Komga API
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ThumbnailSeriesCollectionDto
 */
export interface ThumbnailSeriesCollectionDto {
    /**
     * 
     * @type {string}
     * @memberof ThumbnailSeriesCollectionDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ThumbnailSeriesCollectionDto
     */
    collectionId: string;
    /**
     * 
     * @type {string}
     * @memberof ThumbnailSeriesCollectionDto
     */
    type: string;
    /**
     * 
     * @type {boolean}
     * @memberof ThumbnailSeriesCollectionDto
     */
    selected: boolean;
    /**
     * 
     * @type {string}
     * @memberof ThumbnailSeriesCollectionDto
     */
    mediaType: string;
    /**
     * 
     * @type {number}
     * @memberof ThumbnailSeriesCollectionDto
     */
    fileSize: number;
    /**
     * 
     * @type {number}
     * @memberof ThumbnailSeriesCollectionDto
     */
    width: number;
    /**
     * 
     * @type {number}
     * @memberof ThumbnailSeriesCollectionDto
     */
    height: number;
}

/**
 * Check if a given object implements the ThumbnailSeriesCollectionDto interface.
 */
export function instanceOfThumbnailSeriesCollectionDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "collectionId" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "selected" in value;
    isInstance = isInstance && "mediaType" in value;
    isInstance = isInstance && "fileSize" in value;
    isInstance = isInstance && "width" in value;
    isInstance = isInstance && "height" in value;

    return isInstance;
}

export function ThumbnailSeriesCollectionDtoFromJSON(json: any): ThumbnailSeriesCollectionDto {
    return ThumbnailSeriesCollectionDtoFromJSONTyped(json, false);
}

export function ThumbnailSeriesCollectionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ThumbnailSeriesCollectionDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'collectionId': json['collectionId'],
        'type': json['type'],
        'selected': json['selected'],
        'mediaType': json['mediaType'],
        'fileSize': json['fileSize'],
        'width': json['width'],
        'height': json['height'],
    };
}

export function ThumbnailSeriesCollectionDtoToJSON(value?: ThumbnailSeriesCollectionDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'collectionId': value.collectionId,
        'type': value.type,
        'selected': value.selected,
        'mediaType': value.mediaType,
        'fileSize': value.fileSize,
        'width': value.width,
        'height': value.height,
    };
}

