/* tslint:disable */
/* eslint-disable */
/**
 * Komga API
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PageHashCreationDto,
  PageHashMatchDto,
  PagePageHashKnownDto,
  PagePageHashMatchDto,
  PagePageHashUnknownDto,
  ValidationErrorResponse,
} from '../models/index';
import {
    PageHashCreationDtoFromJSON,
    PageHashCreationDtoToJSON,
    PageHashMatchDtoFromJSON,
    PageHashMatchDtoToJSON,
    PagePageHashKnownDtoFromJSON,
    PagePageHashKnownDtoToJSON,
    PagePageHashMatchDtoFromJSON,
    PagePageHashMatchDtoToJSON,
    PagePageHashUnknownDtoFromJSON,
    PagePageHashUnknownDtoToJSON,
    ValidationErrorResponseFromJSON,
    ValidationErrorResponseToJSON,
} from '../models/index';

export interface CreateOrUpdateKnownPageHashRequest {
    pageHashCreationDto: PageHashCreationDto;
}

export interface DeleteSingleMatchRequest {
    pageHash: string;
    pageHashMatchDto: PageHashMatchDto;
}

export interface GetKnownPageHashThumbnailRequest {
    pageHash: string;
}

export interface GetKnownPageHashesRequest {
    action?: Array<GetKnownPageHashesActionEnum>;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetPageHashMatchesRequest {
    pageHash: string;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetUnknownPageHashThumbnailRequest {
    pageHash: string;
    resize?: number;
}

export interface GetUnknownPageHashesRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface PerformDeleteRequest {
    pageHash: string;
}

/**
 * 
 */
export class PageHashControllerApi extends runtime.BaseAPI {

    /**
     */
    async createOrUpdateKnownPageHashRaw(requestParameters: CreateOrUpdateKnownPageHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pageHashCreationDto === null || requestParameters.pageHashCreationDto === undefined) {
            throw new runtime.RequiredError('pageHashCreationDto','Required parameter requestParameters.pageHashCreationDto was null or undefined when calling createOrUpdateKnownPageHash.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/page-hashes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PageHashCreationDtoToJSON(requestParameters.pageHashCreationDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createOrUpdateKnownPageHash(requestParameters: CreateOrUpdateKnownPageHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createOrUpdateKnownPageHashRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteSingleMatchRaw(requestParameters: DeleteSingleMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pageHash === null || requestParameters.pageHash === undefined) {
            throw new runtime.RequiredError('pageHash','Required parameter requestParameters.pageHash was null or undefined when calling deleteSingleMatch.');
        }

        if (requestParameters.pageHashMatchDto === null || requestParameters.pageHashMatchDto === undefined) {
            throw new runtime.RequiredError('pageHashMatchDto','Required parameter requestParameters.pageHashMatchDto was null or undefined when calling deleteSingleMatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/page-hashes/{pageHash}/delete-match`.replace(`{${"pageHash"}}`, encodeURIComponent(String(requestParameters.pageHash))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PageHashMatchDtoToJSON(requestParameters.pageHashMatchDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteSingleMatch(requestParameters: DeleteSingleMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSingleMatchRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getKnownPageHashThumbnailRaw(requestParameters: GetKnownPageHashThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.pageHash === null || requestParameters.pageHash === undefined) {
            throw new runtime.RequiredError('pageHash','Required parameter requestParameters.pageHash was null or undefined when calling getKnownPageHashThumbnail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/page-hashes/{pageHash}/thumbnail`.replace(`{${"pageHash"}}`, encodeURIComponent(String(requestParameters.pageHash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<Blob>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getKnownPageHashThumbnail(requestParameters: GetKnownPageHashThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getKnownPageHashThumbnailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getKnownPageHashesRaw(requestParameters: GetKnownPageHashesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagePageHashKnownDto>> {
        const queryParameters: any = {};

        if (requestParameters.action) {
            queryParameters['action'] = requestParameters.action;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/page-hashes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagePageHashKnownDtoFromJSON(jsonValue));
    }

    /**
     */
    async getKnownPageHashes(requestParameters: GetKnownPageHashesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagePageHashKnownDto> {
        const response = await this.getKnownPageHashesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPageHashMatchesRaw(requestParameters: GetPageHashMatchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagePageHashMatchDto>> {
        if (requestParameters.pageHash === null || requestParameters.pageHash === undefined) {
            throw new runtime.RequiredError('pageHash','Required parameter requestParameters.pageHash was null or undefined when calling getPageHashMatches.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/page-hashes/{pageHash}`.replace(`{${"pageHash"}}`, encodeURIComponent(String(requestParameters.pageHash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagePageHashMatchDtoFromJSON(jsonValue));
    }

    /**
     */
    async getPageHashMatches(requestParameters: GetPageHashMatchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagePageHashMatchDto> {
        const response = await this.getPageHashMatchesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUnknownPageHashThumbnailRaw(requestParameters: GetUnknownPageHashThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.pageHash === null || requestParameters.pageHash === undefined) {
            throw new runtime.RequiredError('pageHash','Required parameter requestParameters.pageHash was null or undefined when calling getUnknownPageHashThumbnail.');
        }

        const queryParameters: any = {};

        if (requestParameters.resize !== undefined) {
            queryParameters['resize'] = requestParameters.resize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/page-hashes/unknown/{pageHash}/thumbnail`.replace(`{${"pageHash"}}`, encodeURIComponent(String(requestParameters.pageHash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<Blob>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getUnknownPageHashThumbnail(requestParameters: GetUnknownPageHashThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getUnknownPageHashThumbnailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUnknownPageHashesRaw(requestParameters: GetUnknownPageHashesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagePageHashUnknownDto>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/page-hashes/unknown`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagePageHashUnknownDtoFromJSON(jsonValue));
    }

    /**
     */
    async getUnknownPageHashes(requestParameters: GetUnknownPageHashesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagePageHashUnknownDto> {
        const response = await this.getUnknownPageHashesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async performDeleteRaw(requestParameters: PerformDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pageHash === null || requestParameters.pageHash === undefined) {
            throw new runtime.RequiredError('pageHash','Required parameter requestParameters.pageHash was null or undefined when calling performDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/page-hashes/{pageHash}/delete-all`.replace(`{${"pageHash"}}`, encodeURIComponent(String(requestParameters.pageHash))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async performDelete(requestParameters: PerformDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.performDeleteRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GetKnownPageHashesActionEnum = {
    DeleteAuto: 'DELETE_AUTO',
    DeleteManual: 'DELETE_MANUAL',
    Ignore: 'IGNORE'
} as const;
export type GetKnownPageHashesActionEnum = typeof GetKnownPageHashesActionEnum[keyof typeof GetKnownPageHashesActionEnum];
