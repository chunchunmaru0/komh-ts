/* tslint:disable */
/* eslint-disable */
/**
 * Komga API
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LibraryCreationDto,
  LibraryDto,
  LibraryUpdateDto,
  ValidationErrorResponse,
} from '../models/index';
import {
    LibraryCreationDtoFromJSON,
    LibraryCreationDtoToJSON,
    LibraryDtoFromJSON,
    LibraryDtoToJSON,
    LibraryUpdateDtoFromJSON,
    LibraryUpdateDtoToJSON,
    ValidationErrorResponseFromJSON,
    ValidationErrorResponseToJSON,
} from '../models/index';

export interface AddOne2Request {
    libraryCreationDto: LibraryCreationDto;
}

export interface Analyze2Request {
    libraryId: string;
}

export interface DeleteOne1Request {
    libraryId: string;
}

export interface EmptyTrashRequest {
    libraryId: string;
}

export interface GetOne1Request {
    libraryId: string;
}

export interface PatchOneRequest {
    libraryId: string;
    libraryUpdateDto: LibraryUpdateDto;
}

export interface RefreshMetadata1Request {
    libraryId: string;
}

export interface ScanRequest {
    libraryId: string;
    deep?: boolean;
}

export interface UpdateOneRequest {
    libraryId: string;
    libraryUpdateDto: LibraryUpdateDto;
}

/**
 * 
 */
export class LibraryControllerApi extends runtime.BaseAPI {

    /**
     */
    async addOne2Raw(requestParameters: AddOne2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryDto>> {
        if (requestParameters.libraryCreationDto === null || requestParameters.libraryCreationDto === undefined) {
            throw new runtime.RequiredError('libraryCreationDto','Required parameter requestParameters.libraryCreationDto was null or undefined when calling addOne2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/libraries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LibraryCreationDtoToJSON(requestParameters.libraryCreationDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LibraryDtoFromJSON(jsonValue));
    }

    /**
     */
    async addOne2(requestParameters: AddOne2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryDto> {
        const response = await this.addOne2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async analyze2Raw(requestParameters: Analyze2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.libraryId === null || requestParameters.libraryId === undefined) {
            throw new runtime.RequiredError('libraryId','Required parameter requestParameters.libraryId was null or undefined when calling analyze2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/libraries/{libraryId}/analyze`.replace(`{${"libraryId"}}`, encodeURIComponent(String(requestParameters.libraryId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async analyze2(requestParameters: Analyze2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyze2Raw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteOne1Raw(requestParameters: DeleteOne1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.libraryId === null || requestParameters.libraryId === undefined) {
            throw new runtime.RequiredError('libraryId','Required parameter requestParameters.libraryId was null or undefined when calling deleteOne1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/libraries/{libraryId}`.replace(`{${"libraryId"}}`, encodeURIComponent(String(requestParameters.libraryId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteOne1(requestParameters: DeleteOne1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOne1Raw(requestParameters, initOverrides);
    }

    /**
     */
    async emptyTrashRaw(requestParameters: EmptyTrashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.libraryId === null || requestParameters.libraryId === undefined) {
            throw new runtime.RequiredError('libraryId','Required parameter requestParameters.libraryId was null or undefined when calling emptyTrash.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/libraries/{libraryId}/empty-trash`.replace(`{${"libraryId"}}`, encodeURIComponent(String(requestParameters.libraryId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async emptyTrash(requestParameters: EmptyTrashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.emptyTrashRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAll2Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LibraryDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/libraries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LibraryDtoFromJSON));
    }

    /**
     */
    async getAll2(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LibraryDto>> {
        const response = await this.getAll2Raw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getOne1Raw(requestParameters: GetOne1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryDto>> {
        if (requestParameters.libraryId === null || requestParameters.libraryId === undefined) {
            throw new runtime.RequiredError('libraryId','Required parameter requestParameters.libraryId was null or undefined when calling getOne1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/libraries/{libraryId}`.replace(`{${"libraryId"}}`, encodeURIComponent(String(requestParameters.libraryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LibraryDtoFromJSON(jsonValue));
    }

    /**
     */
    async getOne1(requestParameters: GetOne1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryDto> {
        const response = await this.getOne1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async patchOneRaw(requestParameters: PatchOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.libraryId === null || requestParameters.libraryId === undefined) {
            throw new runtime.RequiredError('libraryId','Required parameter requestParameters.libraryId was null or undefined when calling patchOne.');
        }

        if (requestParameters.libraryUpdateDto === null || requestParameters.libraryUpdateDto === undefined) {
            throw new runtime.RequiredError('libraryUpdateDto','Required parameter requestParameters.libraryUpdateDto was null or undefined when calling patchOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/libraries/{libraryId}`.replace(`{${"libraryId"}}`, encodeURIComponent(String(requestParameters.libraryId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LibraryUpdateDtoToJSON(requestParameters.libraryUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async patchOne(requestParameters: PatchOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async refreshMetadata1Raw(requestParameters: RefreshMetadata1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.libraryId === null || requestParameters.libraryId === undefined) {
            throw new runtime.RequiredError('libraryId','Required parameter requestParameters.libraryId was null or undefined when calling refreshMetadata1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/libraries/{libraryId}/metadata/refresh`.replace(`{${"libraryId"}}`, encodeURIComponent(String(requestParameters.libraryId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async refreshMetadata1(requestParameters: RefreshMetadata1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.refreshMetadata1Raw(requestParameters, initOverrides);
    }

    /**
     */
    async scanRaw(requestParameters: ScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.libraryId === null || requestParameters.libraryId === undefined) {
            throw new runtime.RequiredError('libraryId','Required parameter requestParameters.libraryId was null or undefined when calling scan.');
        }

        const queryParameters: any = {};

        if (requestParameters.deep !== undefined) {
            queryParameters['deep'] = requestParameters.deep;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/libraries/{libraryId}/scan`.replace(`{${"libraryId"}}`, encodeURIComponent(String(requestParameters.libraryId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async scan(requestParameters: ScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scanRaw(requestParameters, initOverrides);
    }

    /**
     * @deprecated
     */
    async updateOneRaw(requestParameters: UpdateOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.libraryId === null || requestParameters.libraryId === undefined) {
            throw new runtime.RequiredError('libraryId','Required parameter requestParameters.libraryId was null or undefined when calling updateOne.');
        }

        if (requestParameters.libraryUpdateDto === null || requestParameters.libraryUpdateDto === undefined) {
            throw new runtime.RequiredError('libraryUpdateDto','Required parameter requestParameters.libraryUpdateDto was null or undefined when calling updateOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/libraries/{libraryId}`.replace(`{${"libraryId"}}`, encodeURIComponent(String(requestParameters.libraryId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LibraryUpdateDtoToJSON(requestParameters.libraryUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * @deprecated
     */
    async updateOne(requestParameters: UpdateOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateOneRaw(requestParameters, initOverrides);
    }

}
