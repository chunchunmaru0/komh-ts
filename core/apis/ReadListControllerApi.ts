/* tslint:disable */
/* eslint-disable */
/**
 * Komga API
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BookDto,
  PageBookDto,
  PageReadListDto,
  PostUserUploadedSeriesThumbnailRequest,
  ReadListCreationDto,
  ReadListDto,
  ReadListRequestMatchDto,
  ReadListUpdateDto,
  TachiyomiReadProgressDto,
  TachiyomiReadProgressUpdateDto,
  ThumbnailReadListDto,
  ValidationErrorResponse,
} from '../models/index';
import {
    BookDtoFromJSON,
    BookDtoToJSON,
    PageBookDtoFromJSON,
    PageBookDtoToJSON,
    PageReadListDtoFromJSON,
    PageReadListDtoToJSON,
    PostUserUploadedSeriesThumbnailRequestFromJSON,
    PostUserUploadedSeriesThumbnailRequestToJSON,
    ReadListCreationDtoFromJSON,
    ReadListCreationDtoToJSON,
    ReadListDtoFromJSON,
    ReadListDtoToJSON,
    ReadListRequestMatchDtoFromJSON,
    ReadListRequestMatchDtoToJSON,
    ReadListUpdateDtoFromJSON,
    ReadListUpdateDtoToJSON,
    TachiyomiReadProgressDtoFromJSON,
    TachiyomiReadProgressDtoToJSON,
    TachiyomiReadProgressUpdateDtoFromJSON,
    TachiyomiReadProgressUpdateDtoToJSON,
    ThumbnailReadListDtoFromJSON,
    ThumbnailReadListDtoToJSON,
    ValidationErrorResponseFromJSON,
    ValidationErrorResponseToJSON,
} from '../models/index';

export interface AddOne1Request {
    readListCreationDto: ReadListCreationDto;
}

export interface AddUserUploadedReadListThumbnailRequest {
    id: string;
    file: Blob;
    selected?: boolean;
}

export interface DeleteOneRequest {
    id: string;
}

export interface DeleteUserUploadedReadListThumbnailRequest {
    id: string;
    thumbnailId: string;
}

export interface GetAll1Request {
    search?: string;
    libraryId?: Array<string>;
    unpaged?: boolean;
    page?: number;
    size?: number;
}

export interface GetBookSiblingNextRequest {
    id: string;
    bookId: string;
}

export interface GetBookSiblingPreviousRequest {
    id: string;
    bookId: string;
}

export interface GetBooksForReadListRequest {
    id: string;
    libraryId?: Array<string>;
    readStatus?: Array<GetBooksForReadListReadStatusEnum>;
    tag?: Array<string>;
    mediaStatus?: Array<GetBooksForReadListMediaStatusEnum>;
    deleted?: boolean;
    unpaged?: boolean;
    page?: number;
    size?: number;
    author?: Array<string>;
}

export interface GetOneRequest {
    id: string;
}

export interface GetReadListFileRequest {
    id: string;
}

export interface GetReadListThumbnailRequest {
    id: string;
}

export interface GetReadListThumbnailByIdRequest {
    id: string;
    thumbnailId: string;
}

export interface GetReadListThumbnailsRequest {
    id: string;
}

export interface GetReadProgressRequest {
    id: string;
}

export interface MarkReadProgressTachiyomiRequest {
    id: string;
    tachiyomiReadProgressUpdateDto: TachiyomiReadProgressUpdateDto;
}

export interface MarkSelectedReadListThumbnailRequest {
    id: string;
    thumbnailId: string;
}

export interface MatchFromComicRackListRequest {
    postUserUploadedSeriesThumbnailRequest?: PostUserUploadedSeriesThumbnailRequest;
}

export interface UpdateOne1Request {
    id: string;
    readListUpdateDto: ReadListUpdateDto;
}

/**
 * 
 */
export class ReadListControllerApi extends runtime.BaseAPI {

    /**
     */
    async addOne1Raw(requestParameters: AddOne1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadListDto>> {
        if (requestParameters.readListCreationDto === null || requestParameters.readListCreationDto === undefined) {
            throw new runtime.RequiredError('readListCreationDto','Required parameter requestParameters.readListCreationDto was null or undefined when calling addOne1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/readlists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadListCreationDtoToJSON(requestParameters.readListCreationDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadListDtoFromJSON(jsonValue));
    }

    /**
     */
    async addOne1(requestParameters: AddOne1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadListDto> {
        const response = await this.addOne1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async addUserUploadedReadListThumbnailRaw(requestParameters: AddUserUploadedReadListThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThumbnailReadListDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addUserUploadedReadListThumbnail.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling addUserUploadedReadListThumbnail.');
        }

        const queryParameters: any = {};

        if (requestParameters.selected !== undefined) {
            queryParameters['selected'] = requestParameters.selected;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/api/v1/readlists/{id}/thumbnails`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThumbnailReadListDtoFromJSON(jsonValue));
    }

    /**
     */
    async addUserUploadedReadListThumbnail(requestParameters: AddUserUploadedReadListThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThumbnailReadListDto> {
        const response = await this.addUserUploadedReadListThumbnailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteOneRaw(requestParameters: DeleteOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/readlists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteOne(requestParameters: DeleteOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteUserUploadedReadListThumbnailRaw(requestParameters: DeleteUserUploadedReadListThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUserUploadedReadListThumbnail.');
        }

        if (requestParameters.thumbnailId === null || requestParameters.thumbnailId === undefined) {
            throw new runtime.RequiredError('thumbnailId','Required parameter requestParameters.thumbnailId was null or undefined when calling deleteUserUploadedReadListThumbnail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/readlists/{id}/thumbnails/{thumbnailId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"thumbnailId"}}`, encodeURIComponent(String(requestParameters.thumbnailId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUserUploadedReadListThumbnail(requestParameters: DeleteUserUploadedReadListThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserUploadedReadListThumbnailRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAll1Raw(requestParameters: GetAll1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageReadListDto>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.libraryId) {
            queryParameters['library_id'] = requestParameters.libraryId;
        }

        if (requestParameters.unpaged !== undefined) {
            queryParameters['unpaged'] = requestParameters.unpaged;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/readlists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageReadListDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAll1(requestParameters: GetAll1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageReadListDto> {
        const response = await this.getAll1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBookSiblingNextRaw(requestParameters: GetBookSiblingNextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBookSiblingNext.');
        }

        if (requestParameters.bookId === null || requestParameters.bookId === undefined) {
            throw new runtime.RequiredError('bookId','Required parameter requestParameters.bookId was null or undefined when calling getBookSiblingNext.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/readlists/{id}/books/{bookId}/next`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters.bookId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookDtoFromJSON(jsonValue));
    }

    /**
     */
    async getBookSiblingNext(requestParameters: GetBookSiblingNextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookDto> {
        const response = await this.getBookSiblingNextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBookSiblingPreviousRaw(requestParameters: GetBookSiblingPreviousRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBookSiblingPrevious.');
        }

        if (requestParameters.bookId === null || requestParameters.bookId === undefined) {
            throw new runtime.RequiredError('bookId','Required parameter requestParameters.bookId was null or undefined when calling getBookSiblingPrevious.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/readlists/{id}/books/{bookId}/previous`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters.bookId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookDtoFromJSON(jsonValue));
    }

    /**
     */
    async getBookSiblingPrevious(requestParameters: GetBookSiblingPreviousRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookDto> {
        const response = await this.getBookSiblingPreviousRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBooksForReadListRaw(requestParameters: GetBooksForReadListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBookDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBooksForReadList.');
        }

        const queryParameters: any = {};

        if (requestParameters.libraryId) {
            queryParameters['library_id'] = requestParameters.libraryId;
        }

        if (requestParameters.readStatus) {
            queryParameters['read_status'] = requestParameters.readStatus;
        }

        if (requestParameters.tag) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.mediaStatus) {
            queryParameters['media_status'] = requestParameters.mediaStatus;
        }

        if (requestParameters.deleted !== undefined) {
            queryParameters['deleted'] = requestParameters.deleted;
        }

        if (requestParameters.unpaged !== undefined) {
            queryParameters['unpaged'] = requestParameters.unpaged;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.author) {
            queryParameters['author'] = requestParameters.author;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/readlists/{id}/books`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageBookDtoFromJSON(jsonValue));
    }

    /**
     */
    async getBooksForReadList(requestParameters: GetBooksForReadListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBookDto> {
        const response = await this.getBooksForReadListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getOneRaw(requestParameters: GetOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadListDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/readlists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadListDtoFromJSON(jsonValue));
    }

    /**
     */
    async getOne(requestParameters: GetOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadListDto> {
        const response = await this.getOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getReadListFileRaw(requestParameters: GetReadListFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getReadListFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/readlists/{id}/file`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getReadListFile(requestParameters: GetReadListFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getReadListFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getReadListThumbnailRaw(requestParameters: GetReadListThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getReadListThumbnail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/readlists/{id}/thumbnail`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<Blob>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getReadListThumbnail(requestParameters: GetReadListThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getReadListThumbnailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getReadListThumbnailByIdRaw(requestParameters: GetReadListThumbnailByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getReadListThumbnailById.');
        }

        if (requestParameters.thumbnailId === null || requestParameters.thumbnailId === undefined) {
            throw new runtime.RequiredError('thumbnailId','Required parameter requestParameters.thumbnailId was null or undefined when calling getReadListThumbnailById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/readlists/{id}/thumbnails/{thumbnailId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"thumbnailId"}}`, encodeURIComponent(String(requestParameters.thumbnailId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<Blob>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getReadListThumbnailById(requestParameters: GetReadListThumbnailByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getReadListThumbnailByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getReadListThumbnailsRaw(requestParameters: GetReadListThumbnailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ThumbnailReadListDto>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getReadListThumbnails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/readlists/{id}/thumbnails`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ThumbnailReadListDtoFromJSON));
    }

    /**
     */
    async getReadListThumbnails(requestParameters: GetReadListThumbnailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ThumbnailReadListDto>> {
        const response = await this.getReadListThumbnailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getReadProgressRaw(requestParameters: GetReadProgressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TachiyomiReadProgressDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getReadProgress.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/readlists/{id}/read-progress/tachiyomi`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TachiyomiReadProgressDtoFromJSON(jsonValue));
    }

    /**
     */
    async getReadProgress(requestParameters: GetReadProgressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TachiyomiReadProgressDto> {
        const response = await this.getReadProgressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async markReadProgressTachiyomiRaw(requestParameters: MarkReadProgressTachiyomiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling markReadProgressTachiyomi.');
        }

        if (requestParameters.tachiyomiReadProgressUpdateDto === null || requestParameters.tachiyomiReadProgressUpdateDto === undefined) {
            throw new runtime.RequiredError('tachiyomiReadProgressUpdateDto','Required parameter requestParameters.tachiyomiReadProgressUpdateDto was null or undefined when calling markReadProgressTachiyomi.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/readlists/{id}/read-progress/tachiyomi`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TachiyomiReadProgressUpdateDtoToJSON(requestParameters.tachiyomiReadProgressUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async markReadProgressTachiyomi(requestParameters: MarkReadProgressTachiyomiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.markReadProgressTachiyomiRaw(requestParameters, initOverrides);
    }

    /**
     */
    async markSelectedReadListThumbnailRaw(requestParameters: MarkSelectedReadListThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling markSelectedReadListThumbnail.');
        }

        if (requestParameters.thumbnailId === null || requestParameters.thumbnailId === undefined) {
            throw new runtime.RequiredError('thumbnailId','Required parameter requestParameters.thumbnailId was null or undefined when calling markSelectedReadListThumbnail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/readlists/{id}/thumbnails/{thumbnailId}/selected`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"thumbnailId"}}`, encodeURIComponent(String(requestParameters.thumbnailId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async markSelectedReadListThumbnail(requestParameters: MarkSelectedReadListThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.markSelectedReadListThumbnailRaw(requestParameters, initOverrides);
    }

    /**
     */
    async matchFromComicRackListRaw(requestParameters: MatchFromComicRackListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadListRequestMatchDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/readlists/match/comicrack`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostUserUploadedSeriesThumbnailRequestToJSON(requestParameters.postUserUploadedSeriesThumbnailRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadListRequestMatchDtoFromJSON(jsonValue));
    }

    /**
     */
    async matchFromComicRackList(requestParameters: MatchFromComicRackListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadListRequestMatchDto> {
        const response = await this.matchFromComicRackListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateOne1Raw(requestParameters: UpdateOne1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOne1.');
        }

        if (requestParameters.readListUpdateDto === null || requestParameters.readListUpdateDto === undefined) {
            throw new runtime.RequiredError('readListUpdateDto','Required parameter requestParameters.readListUpdateDto was null or undefined when calling updateOne1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/readlists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ReadListUpdateDtoToJSON(requestParameters.readListUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateOne1(requestParameters: UpdateOne1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateOne1Raw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GetBooksForReadListReadStatusEnum = {
    Unread: 'UNREAD',
    Read: 'READ',
    InProgress: 'IN_PROGRESS'
} as const;
export type GetBooksForReadListReadStatusEnum = typeof GetBooksForReadListReadStatusEnum[keyof typeof GetBooksForReadListReadStatusEnum];
/**
 * @export
 */
export const GetBooksForReadListMediaStatusEnum = {
    Unknown: 'UNKNOWN',
    Error: 'ERROR',
    Ready: 'READY',
    Unsupported: 'UNSUPPORTED',
    Outdated: 'OUTDATED'
} as const;
export type GetBooksForReadListMediaStatusEnum = typeof GetBooksForReadListMediaStatusEnum[keyof typeof GetBooksForReadListMediaStatusEnum];
