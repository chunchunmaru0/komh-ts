/* tslint:disable */
/* eslint-disable */
/**
 * Komga API
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  BookDto,
  BookImportBatchDto,
  BookMetadataUpdateDto,
  MediaType,
  PageBookDto,
  PageDto,
  R2Positions,
  R2Progression,
  ReadListDto,
  ReadProgressUpdateDto,
  ThumbnailBookDto,
  ValidationErrorResponse,
  WPPublicationDto,
} from "../models/index";
import {
  BookDtoFromJSON,
  BookDtoToJSON,
  BookImportBatchDtoFromJSON,
  BookImportBatchDtoToJSON,
  BookMetadataUpdateDtoFromJSON,
  BookMetadataUpdateDtoToJSON,
  MediaTypeFromJSON,
  MediaTypeToJSON,
  PageBookDtoFromJSON,
  PageBookDtoToJSON,
  PageDtoFromJSON,
  PageDtoToJSON,
  R2PositionsFromJSON,
  R2PositionsToJSON,
  R2ProgressionFromJSON,
  R2ProgressionToJSON,
  ReadListDtoFromJSON,
  ReadListDtoToJSON,
  ReadProgressUpdateDtoFromJSON,
  ReadProgressUpdateDtoToJSON,
  ThumbnailBookDtoFromJSON,
  ThumbnailBookDtoToJSON,
  ValidationErrorResponseFromJSON,
  ValidationErrorResponseToJSON,
  WPPublicationDtoFromJSON,
  WPPublicationDtoToJSON,
} from "../models/index";

export interface AddUserUploadedBookThumbnailRequest {
  bookId: string;
  file: Blob;
  selected?: boolean;
}

export interface Analyze3Request {
  bookId: string;
}

export interface DeleteBookRequest {
  bookId: string;
}

export interface DeleteReadProgressRequest {
  bookId: string;
}

export interface DeleteUserUploadedBookThumbnailRequest {
  bookId: string;
  thumbnailId: string;
}

export interface GetAllBooksRequest {
  search?: string;
  libraryId?: Array<string>;
  mediaStatus?: Array<GetAllBooksMediaStatusEnum>;
  readStatus?: Array<GetAllBooksReadStatusEnum>;
  releasedAfter?: Date;
  tag?: Array<string>;
  unpaged?: boolean;
  page?: number;
  size?: number;
  sort?: Array<string>;
}

export interface GetAllReadListsByBookRequest {
  bookId: string;
}

export interface GetBookFileRequest {
  bookId: string;
}

export interface GetBookFile1Request {
  bookId: string;
}

export interface GetBookPageRequest {
  bookId: string;
  pageNumber: number;
  convert?: GetBookPageConvertEnum;
  zeroBased?: boolean;
  accept?: Array<MediaType>;
}

export interface GetBookPageRawRequest {
  bookId: string;
  pageNumber: number;
}

export interface GetBookPageThumbnailRequest {
  bookId: string;
  pageNumber: number;
}

export interface GetBookPagesRequest {
  bookId: string;
}

export interface GetBookResourceRequest {
  bookId: string;
  resource: string;
}

export interface GetBookSiblingNext1Request {
  bookId: string;
}

export interface GetBookSiblingPrevious1Request {
  bookId: string;
}

export interface GetBookThumbnailRequest {
  bookId: string;
}

export interface GetBookThumbnailByIdRequest {
  bookId: string;
  thumbnailId: string;
}

export interface GetBookThumbnailsRequest {
  bookId: string;
}

export interface GetBooksOnDeckRequest {
  libraryId?: Array<string>;
  page?: number;
  size?: number;
}

export interface GetDuplicateBooksRequest {
  unpaged?: boolean;
  page?: number;
  size?: number;
  sort?: Array<string>;
}

export interface GetLatestBooksRequest {
  unpaged?: boolean;
  page?: number;
  size?: number;
}

export interface GetOneBookRequest {
  bookId: string;
}

export interface GetPositionsRequest {
  bookId: string;
}

export interface GetProgressionRequest {
  bookId: string;
}

export interface GetWebPubManifestRequest {
  bookId: string;
}

export interface GetWebPubManifestDivinaRequest {
  bookId: string;
}

export interface GetWebPubManifestEpubRequest {
  bookId: string;
}

export interface GetWebPubManifestPdfRequest {
  bookId: string;
}

export interface ImportBooksRequest {
  bookImportBatchDto: BookImportBatchDto;
}

export interface MarkProgressionRequest {
  bookId: string;
  r2Progression: R2Progression;
}

export interface MarkReadProgressRequest {
  bookId: string;
  readProgressUpdateDto: ReadProgressUpdateDto;
}

export interface MarkSelectedBookThumbnailRequest {
  bookId: string;
  thumbnailId: string;
}

export interface RefreshMetadata2Request {
  bookId: string;
}

export interface RegenerateThumbnailsRequest {
  forBiggerResultOnly?: boolean;
}

export interface UpdateBatchMetadataRequest {
  requestBody: { [key: string]: BookMetadataUpdateDto };
}

export interface UpdateMetadata1Request {
  bookId: string;
  bookMetadataUpdateDto: BookMetadataUpdateDto;
}

/**
 *
 */
export class BookControllerApi extends runtime.BaseAPI {
  /**
   */
  async addUserUploadedBookThumbnailRaw(
    requestParameters: AddUserUploadedBookThumbnailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ThumbnailBookDto>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling addUserUploadedBookThumbnail."
      );
    }

    if (
      requestParameters.file === null ||
      requestParameters.file === undefined
    ) {
      throw new runtime.RequiredError(
        "file",
        "Required parameter requestParameters.file was null or undefined when calling addUserUploadedBookThumbnail."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.selected !== undefined) {
      queryParameters["selected"] = requestParameters.selected;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [
      { contentType: "multipart/form-data" },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters.file !== undefined) {
      formParams.append("file", requestParameters.file as any);
    }

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/thumbnails`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ThumbnailBookDtoFromJSON(jsonValue)
    );
  }

  /**
   */
  async addUserUploadedBookThumbnail(
    requestParameters: AddUserUploadedBookThumbnailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ThumbnailBookDto> {
    const response = await this.addUserUploadedBookThumbnailRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async analyze3Raw(
    requestParameters: Analyze3Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling analyze3."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/analyze`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async analyze3(
    requestParameters: Analyze3Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.analyze3Raw(requestParameters, initOverrides);
  }

  /**
   */
  async deleteBookRaw(
    requestParameters: DeleteBookRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling deleteBook."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/file`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async deleteBook(
    requestParameters: DeleteBookRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteBookRaw(requestParameters, initOverrides);
  }

  /**
   * Mark book as unread
   */
  async deleteReadProgressRaw(
    requestParameters: DeleteReadProgressRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling deleteReadProgress."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/read-progress`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Mark book as unread
   */
  async deleteReadProgress(
    requestParameters: DeleteReadProgressRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteReadProgressRaw(requestParameters, initOverrides);
  }

  /**
   */
  async deleteUserUploadedBookThumbnailRaw(
    requestParameters: DeleteUserUploadedBookThumbnailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling deleteUserUploadedBookThumbnail."
      );
    }

    if (
      requestParameters.thumbnailId === null ||
      requestParameters.thumbnailId === undefined
    ) {
      throw new runtime.RequiredError(
        "thumbnailId",
        "Required parameter requestParameters.thumbnailId was null or undefined when calling deleteUserUploadedBookThumbnail."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/thumbnails/{thumbnailId}`
          .replace(
            `{${"bookId"}}`,
            encodeURIComponent(String(requestParameters.bookId))
          )
          .replace(
            `{${"thumbnailId"}}`,
            encodeURIComponent(String(requestParameters.thumbnailId))
          ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async deleteUserUploadedBookThumbnail(
    requestParameters: DeleteUserUploadedBookThumbnailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteUserUploadedBookThumbnailRaw(
      requestParameters,
      initOverrides
    );
  }

  /**
   */
  async getAllBooksRaw(
    requestParameters: GetAllBooksRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PageBookDto>> {
    const queryParameters: any = {};

    if (requestParameters.search !== undefined) {
      queryParameters["search"] = requestParameters.search;
    }

    if (requestParameters.libraryId) {
      queryParameters["library_id"] = requestParameters.libraryId;
    }

    if (requestParameters.mediaStatus) {
      queryParameters["media_status"] = requestParameters.mediaStatus;
    }

    if (requestParameters.readStatus) {
      queryParameters["read_status"] = requestParameters.readStatus;
    }

    if (requestParameters.releasedAfter !== undefined) {
      queryParameters["released_after"] = (
        requestParameters.releasedAfter as any
      )
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters.tag) {
      queryParameters["tag"] = requestParameters.tag;
    }

    if (requestParameters.unpaged !== undefined) {
      queryParameters["unpaged"] = requestParameters.unpaged;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.size !== undefined) {
      queryParameters["size"] = requestParameters.size;
    }

    if (requestParameters.sort) {
      queryParameters["sort"] = requestParameters.sort;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PageBookDtoFromJSON(jsonValue)
    );
  }

  /**
   */
  async getAllBooks(
    requestParameters: GetAllBooksRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PageBookDto> {
    const response = await this.getAllBooksRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getAllReadListsByBookRaw(
    requestParameters: GetAllReadListsByBookRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<ReadListDto>>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling getAllReadListsByBook."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/readlists`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ReadListDtoFromJSON)
    );
  }

  /**
   */
  async getAllReadListsByBook(
    requestParameters: GetAllReadListsByBookRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<ReadListDto>> {
    const response = await this.getAllReadListsByBookRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Download the book file.
   */
  async getBookFileRaw(
    requestParameters: GetBookFileRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling getBookFile."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/file`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Download the book file.
   */
  async getBookFile(
    requestParameters: GetBookFileRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.getBookFileRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Download the book file.
   */
  async getBookFile1Raw(
    requestParameters: GetBookFile1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling getBookFile1."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/file/*`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Download the book file.
   */
  async getBookFile1(
    requestParameters: GetBookFile1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.getBookFile1Raw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getBookPageRaw(
    requestParameters: GetBookPageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Blob>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling getBookPage."
      );
    }

    if (
      requestParameters.pageNumber === null ||
      requestParameters.pageNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "pageNumber",
        "Required parameter requestParameters.pageNumber was null or undefined when calling getBookPage."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.convert !== undefined) {
      queryParameters["convert"] = requestParameters.convert;
    }

    if (requestParameters.zeroBased !== undefined) {
      queryParameters["zero_based"] = requestParameters.zeroBased;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (requestParameters.accept) {
      headerParameters["Accept"] = requestParameters.accept.join(
        runtime.COLLECTION_FORMATS["csv"]
      );
    }

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/pages/{pageNumber}`
          .replace(
            `{${"bookId"}}`,
            encodeURIComponent(String(requestParameters.bookId))
          )
          .replace(
            `{${"pageNumber"}}`,
            encodeURIComponent(String(requestParameters.pageNumber))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<Blob>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   */
  async getBookPage(
    requestParameters: GetBookPageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Blob> {
    const response = await this.getBookPageRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getBookPageV2Raw(
    requestParameters: GetBookPageRawRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling getBookPageRaw."
      );
    }

    if (
      requestParameters.pageNumber === null ||
      requestParameters.pageNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "pageNumber",
        "Required parameter requestParameters.pageNumber was null or undefined when calling getBookPageRaw."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/pages/{pageNumber}/raw`
          .replace(
            `{${"bookId"}}`,
            encodeURIComponent(String(requestParameters.bookId))
          )
          .replace(
            `{${"pageNumber"}}`,
            encodeURIComponent(String(requestParameters.pageNumber))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   */
  async V2Raw(
    requestParameters: GetBookPageRawRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.getBookPageV2Raw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getBookPageThumbnailRaw(
    requestParameters: GetBookPageThumbnailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Blob>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling getBookPageThumbnail."
      );
    }

    if (
      requestParameters.pageNumber === null ||
      requestParameters.pageNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "pageNumber",
        "Required parameter requestParameters.pageNumber was null or undefined when calling getBookPageThumbnail."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/pages/{pageNumber}/thumbnail`
          .replace(
            `{${"bookId"}}`,
            encodeURIComponent(String(requestParameters.bookId))
          )
          .replace(
            `{${"pageNumber"}}`,
            encodeURIComponent(String(requestParameters.pageNumber))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<Blob>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   */
  async getBookPageThumbnail(
    requestParameters: GetBookPageThumbnailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Blob> {
    const response = await this.getBookPageThumbnailRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getBookPagesRaw(
    requestParameters: GetBookPagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<PageDto>>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling getBookPages."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/pages`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(PageDtoFromJSON)
    );
  }

  /**
   */
  async getBookPages(
    requestParameters: GetBookPagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<PageDto>> {
    const response = await this.getBookPagesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getBookResourceRaw(
    requestParameters: GetBookResourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling getBookResource."
      );
    }

    if (
      requestParameters.resource === null ||
      requestParameters.resource === undefined
    ) {
      throw new runtime.RequiredError(
        "resource",
        "Required parameter requestParameters.resource was null or undefined when calling getBookResource."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/resource/{*resource}`
          .replace(
            `{${"bookId"}}`,
            encodeURIComponent(String(requestParameters.bookId))
          )
          .replace(
            `{${"resource"}}`,
            encodeURIComponent(String(requestParameters.resource))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   */
  async getBookResource(
    requestParameters: GetBookResourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.getBookResourceRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getBookSiblingNext1Raw(
    requestParameters: GetBookSiblingNext1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<BookDto>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling getBookSiblingNext1."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/next`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      BookDtoFromJSON(jsonValue)
    );
  }

  /**
   */
  async getBookSiblingNext1(
    requestParameters: GetBookSiblingNext1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<BookDto> {
    const response = await this.getBookSiblingNext1Raw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getBookSiblingPrevious1Raw(
    requestParameters: GetBookSiblingPrevious1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<BookDto>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling getBookSiblingPrevious1."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/previous`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      BookDtoFromJSON(jsonValue)
    );
  }

  /**
   */
  async getBookSiblingPrevious1(
    requestParameters: GetBookSiblingPrevious1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<BookDto> {
    const response = await this.getBookSiblingPrevious1Raw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getBookThumbnailRaw(
    requestParameters: GetBookThumbnailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Blob>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling getBookThumbnail."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/thumbnail`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<Blob>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   */
  async getBookThumbnail(
    requestParameters: GetBookThumbnailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Blob> {
    const response = await this.getBookThumbnailRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getBookThumbnailByIdRaw(
    requestParameters: GetBookThumbnailByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Blob>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling getBookThumbnailById."
      );
    }

    if (
      requestParameters.thumbnailId === null ||
      requestParameters.thumbnailId === undefined
    ) {
      throw new runtime.RequiredError(
        "thumbnailId",
        "Required parameter requestParameters.thumbnailId was null or undefined when calling getBookThumbnailById."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/thumbnails/{thumbnailId}`
          .replace(
            `{${"bookId"}}`,
            encodeURIComponent(String(requestParameters.bookId))
          )
          .replace(
            `{${"thumbnailId"}}`,
            encodeURIComponent(String(requestParameters.thumbnailId))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<Blob>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   */
  async getBookThumbnailById(
    requestParameters: GetBookThumbnailByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Blob> {
    const response = await this.getBookThumbnailByIdRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getBookThumbnailsRaw(
    requestParameters: GetBookThumbnailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<ThumbnailBookDto>>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling getBookThumbnails."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/thumbnails`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ThumbnailBookDtoFromJSON)
    );
  }

  /**
   */
  async getBookThumbnails(
    requestParameters: GetBookThumbnailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<ThumbnailBookDto>> {
    const response = await this.getBookThumbnailsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Return first unread book of series with at least one book read and no books in progress.
   */
  async getBooksOnDeckRaw(
    requestParameters: GetBooksOnDeckRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PageBookDto>> {
    const queryParameters: any = {};

    if (requestParameters.libraryId) {
      queryParameters["library_id"] = requestParameters.libraryId;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.size !== undefined) {
      queryParameters["size"] = requestParameters.size;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/ondeck`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PageBookDtoFromJSON(jsonValue)
    );
  }

  /**
   * Return first unread book of series with at least one book read and no books in progress.
   */
  async getBooksOnDeck(
    requestParameters: GetBooksOnDeckRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PageBookDto> {
    const response = await this.getBooksOnDeckRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getDuplicateBooksRaw(
    requestParameters: GetDuplicateBooksRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PageBookDto>> {
    const queryParameters: any = {};

    if (requestParameters.unpaged !== undefined) {
      queryParameters["unpaged"] = requestParameters.unpaged;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.size !== undefined) {
      queryParameters["size"] = requestParameters.size;
    }

    if (requestParameters.sort) {
      queryParameters["sort"] = requestParameters.sort;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/duplicates`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PageBookDtoFromJSON(jsonValue)
    );
  }

  /**
   */
  async getDuplicateBooks(
    requestParameters: GetDuplicateBooksRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PageBookDto> {
    const response = await this.getDuplicateBooksRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Return newly added or updated books.
   */
  async getLatestBooksRaw(
    requestParameters: GetLatestBooksRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PageBookDto>> {
    const queryParameters: any = {};

    if (requestParameters.unpaged !== undefined) {
      queryParameters["unpaged"] = requestParameters.unpaged;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.size !== undefined) {
      queryParameters["size"] = requestParameters.size;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/latest`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PageBookDtoFromJSON(jsonValue)
    );
  }

  /**
   * Return newly added or updated books.
   */
  async getLatestBooks(
    requestParameters: GetLatestBooksRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PageBookDto> {
    const response = await this.getLatestBooksRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getOneBookRaw(
    requestParameters: GetOneBookRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<BookDto>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling getOneBook."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      BookDtoFromJSON(jsonValue)
    );
  }

  /**
   */
  async getOneBook(
    requestParameters: GetOneBookRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<BookDto> {
    const response = await this.getOneBookRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async getPositionsRaw(
    requestParameters: GetPositionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<R2Positions>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling getPositions."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/positions`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      R2PositionsFromJSON(jsonValue)
    );
  }

  /**
   */
  async getPositions(
    requestParameters: GetPositionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<R2Positions> {
    const response = await this.getPositionsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getProgressionRaw(
    requestParameters: GetProgressionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<R2Progression>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling getProgression."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/progression`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      R2ProgressionFromJSON(jsonValue)
    );
  }

  /**
   */
  async getProgression(
    requestParameters: GetProgressionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<R2Progression> {
    const response = await this.getProgressionRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getWebPubManifestRaw(
    requestParameters: GetWebPubManifestRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<WPPublicationDto>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling getWebPubManifest."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/manifest`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WPPublicationDtoFromJSON(jsonValue)
    );
  }

  /**
   */
  async getWebPubManifest(
    requestParameters: GetWebPubManifestRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<WPPublicationDto> {
    const response = await this.getWebPubManifestRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getWebPubManifestDivinaRaw(
    requestParameters: GetWebPubManifestDivinaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<WPPublicationDto>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling getWebPubManifestDivina."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/manifest/divina`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WPPublicationDtoFromJSON(jsonValue)
    );
  }

  /**
   */
  async getWebPubManifestDivina(
    requestParameters: GetWebPubManifestDivinaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<WPPublicationDto> {
    const response = await this.getWebPubManifestDivinaRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getWebPubManifestEpubRaw(
    requestParameters: GetWebPubManifestEpubRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<WPPublicationDto>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling getWebPubManifestEpub."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/manifest/epub`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WPPublicationDtoFromJSON(jsonValue)
    );
  }

  /**
   */
  async getWebPubManifestEpub(
    requestParameters: GetWebPubManifestEpubRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<WPPublicationDto> {
    const response = await this.getWebPubManifestEpubRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getWebPubManifestPdfRaw(
    requestParameters: GetWebPubManifestPdfRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<WPPublicationDto>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling getWebPubManifestPdf."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/manifest/pdf`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WPPublicationDtoFromJSON(jsonValue)
    );
  }

  /**
   */
  async getWebPubManifestPdf(
    requestParameters: GetWebPubManifestPdfRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<WPPublicationDto> {
    const response = await this.getWebPubManifestPdfRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async importBooksRaw(
    requestParameters: ImportBooksRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.bookImportBatchDto === null ||
      requestParameters.bookImportBatchDto === undefined
    ) {
      throw new runtime.RequiredError(
        "bookImportBatchDto",
        "Required parameter requestParameters.bookImportBatchDto was null or undefined when calling importBooks."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/v1/books/import`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: BookImportBatchDtoToJSON(requestParameters.bookImportBatchDto),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async importBooks(
    requestParameters: ImportBooksRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.importBooksRaw(requestParameters, initOverrides);
  }

  /**
   */
  async markProgressionRaw(
    requestParameters: MarkProgressionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling markProgression."
      );
    }

    if (
      requestParameters.r2Progression === null ||
      requestParameters.r2Progression === undefined
    ) {
      throw new runtime.RequiredError(
        "r2Progression",
        "Required parameter requestParameters.r2Progression was null or undefined when calling markProgression."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/progression`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: R2ProgressionToJSON(requestParameters.r2Progression),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async markProgression(
    requestParameters: MarkProgressionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.markProgressionRaw(requestParameters, initOverrides);
  }

  /**
   * Mark book as read and/or change page progress
   */
  async markReadProgressRaw(
    requestParameters: MarkReadProgressRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling markReadProgress."
      );
    }

    if (
      requestParameters.readProgressUpdateDto === null ||
      requestParameters.readProgressUpdateDto === undefined
    ) {
      throw new runtime.RequiredError(
        "readProgressUpdateDto",
        "Required parameter requestParameters.readProgressUpdateDto was null or undefined when calling markReadProgress."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/read-progress`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: ReadProgressUpdateDtoToJSON(
          requestParameters.readProgressUpdateDto
        ),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Mark book as read and/or change page progress
   */
  async markReadProgress(
    requestParameters: MarkReadProgressRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.markReadProgressRaw(requestParameters, initOverrides);
  }

  /**
   */
  async markSelectedBookThumbnailRaw(
    requestParameters: MarkSelectedBookThumbnailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling markSelectedBookThumbnail."
      );
    }

    if (
      requestParameters.thumbnailId === null ||
      requestParameters.thumbnailId === undefined
    ) {
      throw new runtime.RequiredError(
        "thumbnailId",
        "Required parameter requestParameters.thumbnailId was null or undefined when calling markSelectedBookThumbnail."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/thumbnails/{thumbnailId}/selected`
          .replace(
            `{${"bookId"}}`,
            encodeURIComponent(String(requestParameters.bookId))
          )
          .replace(
            `{${"thumbnailId"}}`,
            encodeURIComponent(String(requestParameters.thumbnailId))
          ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async markSelectedBookThumbnail(
    requestParameters: MarkSelectedBookThumbnailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.markSelectedBookThumbnailRaw(requestParameters, initOverrides);
  }

  /**
   */
  async refreshMetadata2Raw(
    requestParameters: RefreshMetadata2Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling refreshMetadata2."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/metadata/refresh`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async refreshMetadata2(
    requestParameters: RefreshMetadata2Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.refreshMetadata2Raw(requestParameters, initOverrides);
  }

  /**
   */
  async regenerateThumbnailsRaw(
    requestParameters: RegenerateThumbnailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.forBiggerResultOnly !== undefined) {
      queryParameters["for_bigger_result_only"] =
        requestParameters.forBiggerResultOnly;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/books/thumbnails`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async regenerateThumbnails(
    requestParameters: RegenerateThumbnailsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.regenerateThumbnailsRaw(requestParameters, initOverrides);
  }

  /**
   */
  async updateBatchMetadataRaw(
    requestParameters: UpdateBatchMetadataRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.requestBody === null ||
      requestParameters.requestBody === undefined
    ) {
      throw new runtime.RequiredError(
        "requestBody",
        "Required parameter requestParameters.requestBody was null or undefined when calling updateBatchMetadata."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/v1/books/metadata`,
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.requestBody,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async updateBatchMetadata(
    requestParameters: UpdateBatchMetadataRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.updateBatchMetadataRaw(requestParameters, initOverrides);
  }

  /**
   */
  async updateMetadata1Raw(
    requestParameters: UpdateMetadata1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.bookId === null ||
      requestParameters.bookId === undefined
    ) {
      throw new runtime.RequiredError(
        "bookId",
        "Required parameter requestParameters.bookId was null or undefined when calling updateMetadata1."
      );
    }

    if (
      requestParameters.bookMetadataUpdateDto === null ||
      requestParameters.bookMetadataUpdateDto === undefined
    ) {
      throw new runtime.RequiredError(
        "bookMetadataUpdateDto",
        "Required parameter requestParameters.bookMetadataUpdateDto was null or undefined when calling updateMetadata1."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/v1/books/{bookId}/metadata`.replace(
          `{${"bookId"}}`,
          encodeURIComponent(String(requestParameters.bookId))
        ),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: BookMetadataUpdateDtoToJSON(
          requestParameters.bookMetadataUpdateDto
        ),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async updateMetadata1(
    requestParameters: UpdateMetadata1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.updateMetadata1Raw(requestParameters, initOverrides);
  }
}

/**
 * @export
 */
export const GetAllBooksMediaStatusEnum = {
  Unknown: "UNKNOWN",
  Error: "ERROR",
  Ready: "READY",
  Unsupported: "UNSUPPORTED",
  Outdated: "OUTDATED",
} as const;
export type GetAllBooksMediaStatusEnum =
  (typeof GetAllBooksMediaStatusEnum)[keyof typeof GetAllBooksMediaStatusEnum];
/**
 * @export
 */
export const GetAllBooksReadStatusEnum = {
  Unread: "UNREAD",
  Read: "READ",
  InProgress: "IN_PROGRESS",
} as const;
export type GetAllBooksReadStatusEnum =
  (typeof GetAllBooksReadStatusEnum)[keyof typeof GetAllBooksReadStatusEnum];
/**
 * @export
 */
export const GetBookPageConvertEnum = {
  Jpeg: "jpeg",
  Png: "png",
} as const;
export type GetBookPageConvertEnum =
  (typeof GetBookPageConvertEnum)[keyof typeof GetBookPageConvertEnum];
