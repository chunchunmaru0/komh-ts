/* tslint:disable */
/* eslint-disable */
/**
 * Komga API
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CollectionDto,
  GroupCountDto,
  PageBookDto,
  PageSeriesDto,
  SeriesDto,
  SeriesMetadataUpdateDto,
  TachiyomiReadProgressUpdateV2Dto,
  TachiyomiReadProgressV2Dto,
  ThumbnailSeriesDto,
  ValidationErrorResponse,
} from '../models/index';
import {
    CollectionDtoFromJSON,
    CollectionDtoToJSON,
    GroupCountDtoFromJSON,
    GroupCountDtoToJSON,
    PageBookDtoFromJSON,
    PageBookDtoToJSON,
    PageSeriesDtoFromJSON,
    PageSeriesDtoToJSON,
    SeriesDtoFromJSON,
    SeriesDtoToJSON,
    SeriesMetadataUpdateDtoFromJSON,
    SeriesMetadataUpdateDtoToJSON,
    TachiyomiReadProgressUpdateV2DtoFromJSON,
    TachiyomiReadProgressUpdateV2DtoToJSON,
    TachiyomiReadProgressV2DtoFromJSON,
    TachiyomiReadProgressV2DtoToJSON,
    ThumbnailSeriesDtoFromJSON,
    ThumbnailSeriesDtoToJSON,
    ValidationErrorResponseFromJSON,
    ValidationErrorResponseToJSON,
} from '../models/index';

export interface Analyze1Request {
    seriesId: string;
}

export interface DeleteSeriesRequest {
    seriesId: string;
}

export interface DeleteUserUploadedSeriesThumbnailRequest {
    seriesId: string;
    thumbnailId: string;
}

export interface GetAllBooksBySeriesRequest {
    seriesId: string;
    mediaStatus?: Array<GetAllBooksBySeriesMediaStatusEnum>;
    readStatus?: Array<GetAllBooksBySeriesReadStatusEnum>;
    tag?: Array<string>;
    deleted?: boolean;
    unpaged?: boolean;
    page?: number;
    size?: number;
    sort?: Array<string>;
    author?: Array<string>;
}

export interface GetAllCollectionsBySeriesRequest {
    seriesId: string;
}

export interface GetAllSeriesRequest {
    search?: string;
    libraryId?: Array<string>;
    collectionId?: Array<string>;
    status?: Array<GetAllSeriesStatusEnum>;
    readStatus?: Array<GetAllSeriesReadStatusEnum>;
    publisher?: Array<string>;
    language?: Array<string>;
    genre?: Array<string>;
    tag?: Array<string>;
    ageRating?: Array<string>;
    releaseYear?: Array<string>;
    sharingLabel?: Array<string>;
    deleted?: boolean;
    complete?: boolean;
    oneshot?: boolean;
    unpaged?: boolean;
    searchRegex?: string;
    page?: number;
    size?: number;
    sort?: Array<string>;
    author?: Array<string>;
}

export interface GetAlphabeticalGroupsRequest {
    search?: string;
    libraryId?: Array<string>;
    collectionId?: Array<string>;
    status?: Array<GetAlphabeticalGroupsStatusEnum>;
    readStatus?: Array<GetAlphabeticalGroupsReadStatusEnum>;
    publisher?: Array<string>;
    language?: Array<string>;
    genre?: Array<string>;
    tag?: Array<string>;
    ageRating?: Array<string>;
    releaseYear?: Array<string>;
    sharingLabel?: Array<string>;
    deleted?: boolean;
    complete?: boolean;
    oneshot?: boolean;
    searchRegex?: string;
    author?: Array<string>;
}

export interface GetLatestSeriesRequest {
    libraryId?: Array<string>;
    deleted?: boolean;
    oneshot?: boolean;
    unpaged?: boolean;
    page?: number;
    size?: number;
}

export interface GetNewSeriesRequest {
    libraryId?: Array<string>;
    deleted?: boolean;
    oneshot?: boolean;
    unpaged?: boolean;
    page?: number;
    size?: number;
}

export interface GetOneSeriesRequest {
    seriesId: string;
}

export interface GetReadProgressTachiyomiV2Request {
    seriesId: string;
}

export interface GetSeriesDefaultThumbnailRequest {
    seriesId: string;
}

export interface GetSeriesFileRequest {
    seriesId: string;
}

export interface GetSeriesThumbnailByIdRequest {
    seriesId: string;
    thumbnailId: string;
}

export interface GetSeriesThumbnailsRequest {
    seriesId: string;
}

export interface GetUpdatedSeriesRequest {
    libraryId?: Array<string>;
    deleted?: boolean;
    oneshot?: boolean;
    unpaged?: boolean;
    page?: number;
    size?: number;
}

export interface MarkAsReadRequest {
    seriesId: string;
}

export interface MarkAsUnreadRequest {
    seriesId: string;
}

export interface MarkReadProgressTachiyomiV2Request {
    seriesId: string;
    tachiyomiReadProgressUpdateV2Dto: TachiyomiReadProgressUpdateV2Dto;
}

export interface PostMarkSelectedSeriesThumbnailRequest {
    seriesId: string;
    thumbnailId: string;
}

export interface PostUserUploadedSeriesThumbnailRequest {
    seriesId: string;
    file: Blob;
    selected?: boolean;
}

export interface RefreshMetadataRequest {
    seriesId: string;
}

export interface UpdateMetadataRequest {
    seriesId: string;
    seriesMetadataUpdateDto: SeriesMetadataUpdateDto;
}

/**
 * 
 */
export class SeriesControllerApi extends runtime.BaseAPI {

    /**
     */
    async analyze1Raw(requestParameters: Analyze1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling analyze1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/series/{seriesId}/analyze`.replace(`{${"seriesId"}}`, encodeURIComponent(String(requestParameters.seriesId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async analyze1(requestParameters: Analyze1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyze1Raw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteSeriesRaw(requestParameters: DeleteSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling deleteSeries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/series/{seriesId}/file`.replace(`{${"seriesId"}}`, encodeURIComponent(String(requestParameters.seriesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteSeries(requestParameters: DeleteSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSeriesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteUserUploadedSeriesThumbnailRaw(requestParameters: DeleteUserUploadedSeriesThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling deleteUserUploadedSeriesThumbnail.');
        }

        if (requestParameters.thumbnailId === null || requestParameters.thumbnailId === undefined) {
            throw new runtime.RequiredError('thumbnailId','Required parameter requestParameters.thumbnailId was null or undefined when calling deleteUserUploadedSeriesThumbnail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/series/{seriesId}/thumbnails/{thumbnailId}`.replace(`{${"seriesId"}}`, encodeURIComponent(String(requestParameters.seriesId))).replace(`{${"thumbnailId"}}`, encodeURIComponent(String(requestParameters.thumbnailId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUserUploadedSeriesThumbnail(requestParameters: DeleteUserUploadedSeriesThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserUploadedSeriesThumbnailRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllBooksBySeriesRaw(requestParameters: GetAllBooksBySeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBookDto>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling getAllBooksBySeries.');
        }

        const queryParameters: any = {};

        if (requestParameters.mediaStatus) {
            queryParameters['media_status'] = requestParameters.mediaStatus;
        }

        if (requestParameters.readStatus) {
            queryParameters['read_status'] = requestParameters.readStatus;
        }

        if (requestParameters.tag) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.deleted !== undefined) {
            queryParameters['deleted'] = requestParameters.deleted;
        }

        if (requestParameters.unpaged !== undefined) {
            queryParameters['unpaged'] = requestParameters.unpaged;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.author) {
            queryParameters['author'] = requestParameters.author;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/series/{seriesId}/books`.replace(`{${"seriesId"}}`, encodeURIComponent(String(requestParameters.seriesId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageBookDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAllBooksBySeries(requestParameters: GetAllBooksBySeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBookDto> {
        const response = await this.getAllBooksBySeriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllCollectionsBySeriesRaw(requestParameters: GetAllCollectionsBySeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CollectionDto>>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling getAllCollectionsBySeries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/series/{seriesId}/collections`.replace(`{${"seriesId"}}`, encodeURIComponent(String(requestParameters.seriesId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CollectionDtoFromJSON));
    }

    /**
     */
    async getAllCollectionsBySeries(requestParameters: GetAllCollectionsBySeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CollectionDto>> {
        const response = await this.getAllCollectionsBySeriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllSeriesRaw(requestParameters: GetAllSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageSeriesDto>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.libraryId) {
            queryParameters['library_id'] = requestParameters.libraryId;
        }

        if (requestParameters.collectionId) {
            queryParameters['collection_id'] = requestParameters.collectionId;
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.readStatus) {
            queryParameters['read_status'] = requestParameters.readStatus;
        }

        if (requestParameters.publisher) {
            queryParameters['publisher'] = requestParameters.publisher;
        }

        if (requestParameters.language) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.genre) {
            queryParameters['genre'] = requestParameters.genre;
        }

        if (requestParameters.tag) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.ageRating) {
            queryParameters['age_rating'] = requestParameters.ageRating;
        }

        if (requestParameters.releaseYear) {
            queryParameters['release_year'] = requestParameters.releaseYear;
        }

        if (requestParameters.sharingLabel) {
            queryParameters['sharing_label'] = requestParameters.sharingLabel;
        }

        if (requestParameters.deleted !== undefined) {
            queryParameters['deleted'] = requestParameters.deleted;
        }

        if (requestParameters.complete !== undefined) {
            queryParameters['complete'] = requestParameters.complete;
        }

        if (requestParameters.oneshot !== undefined) {
            queryParameters['oneshot'] = requestParameters.oneshot;
        }

        if (requestParameters.unpaged !== undefined) {
            queryParameters['unpaged'] = requestParameters.unpaged;
        }

        if (requestParameters.searchRegex !== undefined) {
            queryParameters['search_regex'] = requestParameters.searchRegex;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.author) {
            queryParameters['author'] = requestParameters.author;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/series`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageSeriesDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAllSeries(requestParameters: GetAllSeriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageSeriesDto> {
        const response = await this.getAllSeriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAlphabeticalGroupsRaw(requestParameters: GetAlphabeticalGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupCountDto>>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.libraryId) {
            queryParameters['library_id'] = requestParameters.libraryId;
        }

        if (requestParameters.collectionId) {
            queryParameters['collection_id'] = requestParameters.collectionId;
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.readStatus) {
            queryParameters['read_status'] = requestParameters.readStatus;
        }

        if (requestParameters.publisher) {
            queryParameters['publisher'] = requestParameters.publisher;
        }

        if (requestParameters.language) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.genre) {
            queryParameters['genre'] = requestParameters.genre;
        }

        if (requestParameters.tag) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.ageRating) {
            queryParameters['age_rating'] = requestParameters.ageRating;
        }

        if (requestParameters.releaseYear) {
            queryParameters['release_year'] = requestParameters.releaseYear;
        }

        if (requestParameters.sharingLabel) {
            queryParameters['sharing_label'] = requestParameters.sharingLabel;
        }

        if (requestParameters.deleted !== undefined) {
            queryParameters['deleted'] = requestParameters.deleted;
        }

        if (requestParameters.complete !== undefined) {
            queryParameters['complete'] = requestParameters.complete;
        }

        if (requestParameters.oneshot !== undefined) {
            queryParameters['oneshot'] = requestParameters.oneshot;
        }

        if (requestParameters.searchRegex !== undefined) {
            queryParameters['search_regex'] = requestParameters.searchRegex;
        }

        if (requestParameters.author) {
            queryParameters['author'] = requestParameters.author;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/series/alphabetical-groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupCountDtoFromJSON));
    }

    /**
     */
    async getAlphabeticalGroups(requestParameters: GetAlphabeticalGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupCountDto>> {
        const response = await this.getAlphabeticalGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return recently added or updated series.
     */
    async getLatestSeriesRaw(requestParameters: GetLatestSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageSeriesDto>> {
        const queryParameters: any = {};

        if (requestParameters.libraryId) {
            queryParameters['library_id'] = requestParameters.libraryId;
        }

        if (requestParameters.deleted !== undefined) {
            queryParameters['deleted'] = requestParameters.deleted;
        }

        if (requestParameters.oneshot !== undefined) {
            queryParameters['oneshot'] = requestParameters.oneshot;
        }

        if (requestParameters.unpaged !== undefined) {
            queryParameters['unpaged'] = requestParameters.unpaged;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/series/latest`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageSeriesDtoFromJSON(jsonValue));
    }

    /**
     * Return recently added or updated series.
     */
    async getLatestSeries(requestParameters: GetLatestSeriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageSeriesDto> {
        const response = await this.getLatestSeriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return newly added series.
     */
    async getNewSeriesRaw(requestParameters: GetNewSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageSeriesDto>> {
        const queryParameters: any = {};

        if (requestParameters.libraryId) {
            queryParameters['library_id'] = requestParameters.libraryId;
        }

        if (requestParameters.deleted !== undefined) {
            queryParameters['deleted'] = requestParameters.deleted;
        }

        if (requestParameters.oneshot !== undefined) {
            queryParameters['oneshot'] = requestParameters.oneshot;
        }

        if (requestParameters.unpaged !== undefined) {
            queryParameters['unpaged'] = requestParameters.unpaged;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/series/new`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageSeriesDtoFromJSON(jsonValue));
    }

    /**
     * Return newly added series.
     */
    async getNewSeries(requestParameters: GetNewSeriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageSeriesDto> {
        const response = await this.getNewSeriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getOneSeriesRaw(requestParameters: GetOneSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SeriesDto>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling getOneSeries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/series/{seriesId}`.replace(`{${"seriesId"}}`, encodeURIComponent(String(requestParameters.seriesId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeriesDtoFromJSON(jsonValue));
    }

    /**
     */
    async getOneSeries(requestParameters: GetOneSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SeriesDto> {
        const response = await this.getOneSeriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getReadProgressTachiyomiV2Raw(requestParameters: GetReadProgressTachiyomiV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TachiyomiReadProgressV2Dto>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling getReadProgressTachiyomiV2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/series/{seriesId}/read-progress/tachiyomi`.replace(`{${"seriesId"}}`, encodeURIComponent(String(requestParameters.seriesId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TachiyomiReadProgressV2DtoFromJSON(jsonValue));
    }

    /**
     */
    async getReadProgressTachiyomiV2(requestParameters: GetReadProgressTachiyomiV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TachiyomiReadProgressV2Dto> {
        const response = await this.getReadProgressTachiyomiV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSeriesDefaultThumbnailRaw(requestParameters: GetSeriesDefaultThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling getSeriesDefaultThumbnail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/series/{seriesId}/thumbnail`.replace(`{${"seriesId"}}`, encodeURIComponent(String(requestParameters.seriesId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<Blob>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getSeriesDefaultThumbnail(requestParameters: GetSeriesDefaultThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getSeriesDefaultThumbnailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSeriesFileRaw(requestParameters: GetSeriesFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling getSeriesFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/series/{seriesId}/file`.replace(`{${"seriesId"}}`, encodeURIComponent(String(requestParameters.seriesId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getSeriesFile(requestParameters: GetSeriesFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getSeriesFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSeriesThumbnailByIdRaw(requestParameters: GetSeriesThumbnailByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling getSeriesThumbnailById.');
        }

        if (requestParameters.thumbnailId === null || requestParameters.thumbnailId === undefined) {
            throw new runtime.RequiredError('thumbnailId','Required parameter requestParameters.thumbnailId was null or undefined when calling getSeriesThumbnailById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/series/{seriesId}/thumbnails/{thumbnailId}`.replace(`{${"seriesId"}}`, encodeURIComponent(String(requestParameters.seriesId))).replace(`{${"thumbnailId"}}`, encodeURIComponent(String(requestParameters.thumbnailId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<Blob>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getSeriesThumbnailById(requestParameters: GetSeriesThumbnailByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getSeriesThumbnailByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSeriesThumbnailsRaw(requestParameters: GetSeriesThumbnailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ThumbnailSeriesDto>>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling getSeriesThumbnails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/series/{seriesId}/thumbnails`.replace(`{${"seriesId"}}`, encodeURIComponent(String(requestParameters.seriesId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ThumbnailSeriesDtoFromJSON));
    }

    /**
     */
    async getSeriesThumbnails(requestParameters: GetSeriesThumbnailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ThumbnailSeriesDto>> {
        const response = await this.getSeriesThumbnailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return recently updated series, but not newly added ones.
     */
    async getUpdatedSeriesRaw(requestParameters: GetUpdatedSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageSeriesDto>> {
        const queryParameters: any = {};

        if (requestParameters.libraryId) {
            queryParameters['library_id'] = requestParameters.libraryId;
        }

        if (requestParameters.deleted !== undefined) {
            queryParameters['deleted'] = requestParameters.deleted;
        }

        if (requestParameters.oneshot !== undefined) {
            queryParameters['oneshot'] = requestParameters.oneshot;
        }

        if (requestParameters.unpaged !== undefined) {
            queryParameters['unpaged'] = requestParameters.unpaged;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/series/updated`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageSeriesDtoFromJSON(jsonValue));
    }

    /**
     * Return recently updated series, but not newly added ones.
     */
    async getUpdatedSeries(requestParameters: GetUpdatedSeriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageSeriesDto> {
        const response = await this.getUpdatedSeriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark all book for series as read
     */
    async markAsReadRaw(requestParameters: MarkAsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling markAsRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/series/{seriesId}/read-progress`.replace(`{${"seriesId"}}`, encodeURIComponent(String(requestParameters.seriesId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Mark all book for series as read
     */
    async markAsRead(requestParameters: MarkAsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.markAsReadRaw(requestParameters, initOverrides);
    }

    /**
     * Mark all book for series as unread
     */
    async markAsUnreadRaw(requestParameters: MarkAsUnreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling markAsUnread.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/series/{seriesId}/read-progress`.replace(`{${"seriesId"}}`, encodeURIComponent(String(requestParameters.seriesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Mark all book for series as unread
     */
    async markAsUnread(requestParameters: MarkAsUnreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.markAsUnreadRaw(requestParameters, initOverrides);
    }

    /**
     */
    async markReadProgressTachiyomiV2Raw(requestParameters: MarkReadProgressTachiyomiV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling markReadProgressTachiyomiV2.');
        }

        if (requestParameters.tachiyomiReadProgressUpdateV2Dto === null || requestParameters.tachiyomiReadProgressUpdateV2Dto === undefined) {
            throw new runtime.RequiredError('tachiyomiReadProgressUpdateV2Dto','Required parameter requestParameters.tachiyomiReadProgressUpdateV2Dto was null or undefined when calling markReadProgressTachiyomiV2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/series/{seriesId}/read-progress/tachiyomi`.replace(`{${"seriesId"}}`, encodeURIComponent(String(requestParameters.seriesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TachiyomiReadProgressUpdateV2DtoToJSON(requestParameters.tachiyomiReadProgressUpdateV2Dto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async markReadProgressTachiyomiV2(requestParameters: MarkReadProgressTachiyomiV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.markReadProgressTachiyomiV2Raw(requestParameters, initOverrides);
    }

    /**
     */
    async postMarkSelectedSeriesThumbnailRaw(requestParameters: PostMarkSelectedSeriesThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling postMarkSelectedSeriesThumbnail.');
        }

        if (requestParameters.thumbnailId === null || requestParameters.thumbnailId === undefined) {
            throw new runtime.RequiredError('thumbnailId','Required parameter requestParameters.thumbnailId was null or undefined when calling postMarkSelectedSeriesThumbnail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/series/{seriesId}/thumbnails/{thumbnailId}/selected`.replace(`{${"seriesId"}}`, encodeURIComponent(String(requestParameters.seriesId))).replace(`{${"thumbnailId"}}`, encodeURIComponent(String(requestParameters.thumbnailId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postMarkSelectedSeriesThumbnail(requestParameters: PostMarkSelectedSeriesThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postMarkSelectedSeriesThumbnailRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postUserUploadedSeriesThumbnailRaw(requestParameters: PostUserUploadedSeriesThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThumbnailSeriesDto>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling postUserUploadedSeriesThumbnail.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling postUserUploadedSeriesThumbnail.');
        }

        const queryParameters: any = {};

        if (requestParameters.selected !== undefined) {
            queryParameters['selected'] = requestParameters.selected;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/api/v1/series/{seriesId}/thumbnails`.replace(`{${"seriesId"}}`, encodeURIComponent(String(requestParameters.seriesId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThumbnailSeriesDtoFromJSON(jsonValue));
    }

    /**
     */
    async postUserUploadedSeriesThumbnail(requestParameters: PostUserUploadedSeriesThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThumbnailSeriesDto> {
        const response = await this.postUserUploadedSeriesThumbnailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async refreshMetadataRaw(requestParameters: RefreshMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling refreshMetadata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/series/{seriesId}/metadata/refresh`.replace(`{${"seriesId"}}`, encodeURIComponent(String(requestParameters.seriesId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async refreshMetadata(requestParameters: RefreshMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.refreshMetadataRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateMetadataRaw(requestParameters: UpdateMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling updateMetadata.');
        }

        if (requestParameters.seriesMetadataUpdateDto === null || requestParameters.seriesMetadataUpdateDto === undefined) {
            throw new runtime.RequiredError('seriesMetadataUpdateDto','Required parameter requestParameters.seriesMetadataUpdateDto was null or undefined when calling updateMetadata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/series/{seriesId}/metadata`.replace(`{${"seriesId"}}`, encodeURIComponent(String(requestParameters.seriesId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SeriesMetadataUpdateDtoToJSON(requestParameters.seriesMetadataUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateMetadata(requestParameters: UpdateMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateMetadataRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GetAllBooksBySeriesMediaStatusEnum = {
    Unknown: 'UNKNOWN',
    Error: 'ERROR',
    Ready: 'READY',
    Unsupported: 'UNSUPPORTED',
    Outdated: 'OUTDATED'
} as const;
export type GetAllBooksBySeriesMediaStatusEnum = typeof GetAllBooksBySeriesMediaStatusEnum[keyof typeof GetAllBooksBySeriesMediaStatusEnum];
/**
 * @export
 */
export const GetAllBooksBySeriesReadStatusEnum = {
    Unread: 'UNREAD',
    Read: 'READ',
    InProgress: 'IN_PROGRESS'
} as const;
export type GetAllBooksBySeriesReadStatusEnum = typeof GetAllBooksBySeriesReadStatusEnum[keyof typeof GetAllBooksBySeriesReadStatusEnum];
/**
 * @export
 */
export const GetAllSeriesStatusEnum = {
    Ended: 'ENDED',
    Ongoing: 'ONGOING',
    Abandoned: 'ABANDONED',
    Hiatus: 'HIATUS'
} as const;
export type GetAllSeriesStatusEnum = typeof GetAllSeriesStatusEnum[keyof typeof GetAllSeriesStatusEnum];
/**
 * @export
 */
export const GetAllSeriesReadStatusEnum = {
    Unread: 'UNREAD',
    Read: 'READ',
    InProgress: 'IN_PROGRESS'
} as const;
export type GetAllSeriesReadStatusEnum = typeof GetAllSeriesReadStatusEnum[keyof typeof GetAllSeriesReadStatusEnum];
/**
 * @export
 */
export const GetAlphabeticalGroupsStatusEnum = {
    Ended: 'ENDED',
    Ongoing: 'ONGOING',
    Abandoned: 'ABANDONED',
    Hiatus: 'HIATUS'
} as const;
export type GetAlphabeticalGroupsStatusEnum = typeof GetAlphabeticalGroupsStatusEnum[keyof typeof GetAlphabeticalGroupsStatusEnum];
/**
 * @export
 */
export const GetAlphabeticalGroupsReadStatusEnum = {
    Unread: 'UNREAD',
    Read: 'READ',
    InProgress: 'IN_PROGRESS'
} as const;
export type GetAlphabeticalGroupsReadStatusEnum = typeof GetAlphabeticalGroupsReadStatusEnum[keyof typeof GetAlphabeticalGroupsReadStatusEnum];
