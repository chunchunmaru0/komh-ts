/* tslint:disable */
/* eslint-disable */
/**
 * Komga API
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthenticationActivityDto,
  PageAuthenticationActivityDto,
  PasswordUpdateDto,
  UserCreationDto,
  UserDto,
  UserUpdateDto,
  ValidationErrorResponse,
} from '../models/index';
import {
    AuthenticationActivityDtoFromJSON,
    AuthenticationActivityDtoToJSON,
    PageAuthenticationActivityDtoFromJSON,
    PageAuthenticationActivityDtoToJSON,
    PasswordUpdateDtoFromJSON,
    PasswordUpdateDtoToJSON,
    UserCreationDtoFromJSON,
    UserCreationDtoToJSON,
    UserDtoFromJSON,
    UserDtoToJSON,
    UserUpdateDtoFromJSON,
    UserUpdateDtoToJSON,
    ValidationErrorResponseFromJSON,
    ValidationErrorResponseToJSON,
} from '../models/index';

export interface DeleteRequest {
    id: string;
}

export interface AddOneRequest {
    userCreationDto: UserCreationDto;
}

export interface GetAuthenticationActivityRequest {
    unpaged?: boolean;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetLatestAuthenticationActivityForUserRequest {
    id: string;
}

export interface GetMyAuthenticationActivityRequest {
    unpaged?: boolean;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface UpdateMyPasswordRequest {
    passwordUpdateDto: PasswordUpdateDto;
}

export interface UpdatePasswordRequest {
    id: string;
    passwordUpdateDto: PasswordUpdateDto;
}

export interface UpdateUserRequest {
    id: string;
    userUpdateDto: UserUpdateDto;
}

/**
 * 
 */
export class UserControllerApi extends runtime.BaseAPI {

    /**
     */
    async _deleteRaw(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _delete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async _delete(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._deleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async addOneRaw(requestParameters: AddOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>> {
        if (requestParameters.userCreationDto === null || requestParameters.userCreationDto === undefined) {
            throw new runtime.RequiredError('userCreationDto','Required parameter requestParameters.userCreationDto was null or undefined when calling addOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreationDtoToJSON(requestParameters.userCreationDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     */
    async addOne(requestParameters: AddOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto> {
        const response = await this.addOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserDtoFromJSON));
    }

    /**
     */
    async getAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserDto>> {
        const response = await this.getAllRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getAuthenticationActivityRaw(requestParameters: GetAuthenticationActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageAuthenticationActivityDto>> {
        const queryParameters: any = {};

        if (requestParameters.unpaged !== undefined) {
            queryParameters['unpaged'] = requestParameters.unpaged;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/users/authentication-activity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageAuthenticationActivityDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAuthenticationActivity(requestParameters: GetAuthenticationActivityRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageAuthenticationActivityDto> {
        const response = await this.getAuthenticationActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLatestAuthenticationActivityForUserRaw(requestParameters: GetLatestAuthenticationActivityForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationActivityDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getLatestAuthenticationActivityForUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/users/{id}/authentication-activity/latest`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationActivityDtoFromJSON(jsonValue));
    }

    /**
     */
    async getLatestAuthenticationActivityForUser(requestParameters: GetLatestAuthenticationActivityForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationActivityDto> {
        const response = await this.getLatestAuthenticationActivityForUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     */
    async getMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto> {
        const response = await this.getMeRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getMyAuthenticationActivityRaw(requestParameters: GetMyAuthenticationActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageAuthenticationActivityDto>> {
        const queryParameters: any = {};

        if (requestParameters.unpaged !== undefined) {
            queryParameters['unpaged'] = requestParameters.unpaged;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/users/me/authentication-activity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageAuthenticationActivityDtoFromJSON(jsonValue));
    }

    /**
     */
    async getMyAuthenticationActivity(requestParameters: GetMyAuthenticationActivityRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageAuthenticationActivityDto> {
        const response = await this.getMyAuthenticationActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateMyPasswordRaw(requestParameters: UpdateMyPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.passwordUpdateDto === null || requestParameters.passwordUpdateDto === undefined) {
            throw new runtime.RequiredError('passwordUpdateDto','Required parameter requestParameters.passwordUpdateDto was null or undefined when calling updateMyPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/users/me/password`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordUpdateDtoToJSON(requestParameters.passwordUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateMyPassword(requestParameters: UpdateMyPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateMyPasswordRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updatePasswordRaw(requestParameters: UpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePassword.');
        }

        if (requestParameters.passwordUpdateDto === null || requestParameters.passwordUpdateDto === undefined) {
            throw new runtime.RequiredError('passwordUpdateDto','Required parameter requestParameters.passwordUpdateDto was null or undefined when calling updatePassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/users/{id}/password`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordUpdateDtoToJSON(requestParameters.passwordUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updatePassword(requestParameters: UpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updatePasswordRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateUserRaw(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.userUpdateDto === null || requestParameters.userUpdateDto === undefined) {
            throw new runtime.RequiredError('userUpdateDto','Required parameter requestParameters.userUpdateDto was null or undefined when calling updateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserUpdateDtoToJSON(requestParameters.userUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateUser(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateUserRaw(requestParameters, initOverrides);
    }

}
