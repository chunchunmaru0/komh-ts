/* tslint:disable */
/* eslint-disable */
/**
 * Komga API
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClaimStatus,
  UserDto,
  ValidationErrorResponse,
} from '../models/index';
import {
    ClaimStatusFromJSON,
    ClaimStatusToJSON,
    UserDtoFromJSON,
    UserDtoToJSON,
    ValidationErrorResponseFromJSON,
    ValidationErrorResponseToJSON,
} from '../models/index';

export interface ClaimAdminRequest {
    xKomgaEmail: string;
    xKomgaPassword: string;
}

/**
 * 
 */
export class ClaimControllerApi extends runtime.BaseAPI {

    /**
     */
    async claimAdminRaw(requestParameters: ClaimAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>> {
        if (requestParameters.xKomgaEmail === null || requestParameters.xKomgaEmail === undefined) {
            throw new runtime.RequiredError('xKomgaEmail','Required parameter requestParameters.xKomgaEmail was null or undefined when calling claimAdmin.');
        }

        if (requestParameters.xKomgaPassword === null || requestParameters.xKomgaPassword === undefined) {
            throw new runtime.RequiredError('xKomgaPassword','Required parameter requestParameters.xKomgaPassword was null or undefined when calling claimAdmin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xKomgaEmail !== undefined && requestParameters.xKomgaEmail !== null) {
            headerParameters['X-Komga-Email'] = String(requestParameters.xKomgaEmail);
        }

        if (requestParameters.xKomgaPassword !== undefined && requestParameters.xKomgaPassword !== null) {
            headerParameters['X-Komga-Password'] = String(requestParameters.xKomgaPassword);
        }

        const response = await this.request({
            path: `/api/v1/claim`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     */
    async claimAdmin(requestParameters: ClaimAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto> {
        const response = await this.claimAdminRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getClaimStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/claim`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimStatusFromJSON(jsonValue));
    }

    /**
     */
    async getClaimStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimStatus> {
        const response = await this.getClaimStatusRaw(initOverrides);
        return await response.value();
    }

}
