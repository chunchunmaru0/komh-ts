/* tslint:disable */
/* eslint-disable */
/**
 * Komga API
 * Komga offers 2 APIs: REST and OPDS.  Both APIs are secured using HTTP Basic Authentication.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthorDto,
  PageAuthorDto,
  ValidationErrorResponse,
} from '../models/index';
import {
    AuthorDtoFromJSON,
    AuthorDtoToJSON,
    PageAuthorDtoFromJSON,
    PageAuthorDtoToJSON,
    ValidationErrorResponseFromJSON,
    ValidationErrorResponseToJSON,
} from '../models/index';

export interface GetAgeRatingsRequest {
    libraryId?: string;
    collectionId?: string;
}

export interface GetAuthorsRequest {
    search?: string;
    role?: string;
    libraryId?: string;
    collectionId?: string;
    seriesId?: string;
    readlistId?: string;
    unpaged?: boolean;
    page?: number;
    size?: number;
}

export interface GetAuthorsNamesRequest {
    search?: string;
}

export interface GetAuthorsV1Request {
    search?: string;
    libraryId?: string;
    collectionId?: string;
    seriesId?: string;
}

export interface GetBookTagsRequest {
    seriesId?: string;
    readlistId?: string;
}

export interface GetGenresRequest {
    libraryId?: string;
    collectionId?: string;
}

export interface GetLanguagesRequest {
    libraryId?: string;
    collectionId?: string;
}

export interface GetPublishersRequest {
    libraryId?: string;
    collectionId?: string;
}

export interface GetSeriesReleaseDatesRequest {
    libraryId?: string;
    collectionId?: string;
}

export interface GetSeriesTagsRequest {
    libraryId?: string;
    collectionId?: string;
}

export interface GetSharingLabelsRequest {
    libraryId?: string;
    collectionId?: string;
}

export interface GetTagsRequest {
    libraryId?: string;
    collectionId?: string;
}

/**
 * 
 */
export class ReferentialControllerApi extends runtime.BaseAPI {

    /**
     */
    async getAgeRatingsRaw(requestParameters: GetAgeRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Set<string>>> {
        const queryParameters: any = {};

        if (requestParameters.libraryId !== undefined) {
            queryParameters['library_id'] = requestParameters.libraryId;
        }

        if (requestParameters.collectionId !== undefined) {
            queryParameters['collection_id'] = requestParameters.collectionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/age-ratings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getAgeRatings(requestParameters: GetAgeRatingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Set<string>> {
        const response = await this.getAgeRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAuthorsRaw(requestParameters: GetAuthorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageAuthorDto>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.role !== undefined) {
            queryParameters['role'] = requestParameters.role;
        }

        if (requestParameters.libraryId !== undefined) {
            queryParameters['library_id'] = requestParameters.libraryId;
        }

        if (requestParameters.collectionId !== undefined) {
            queryParameters['collection_id'] = requestParameters.collectionId;
        }

        if (requestParameters.seriesId !== undefined) {
            queryParameters['series_id'] = requestParameters.seriesId;
        }

        if (requestParameters.readlistId !== undefined) {
            queryParameters['readlist_id'] = requestParameters.readlistId;
        }

        if (requestParameters.unpaged !== undefined) {
            queryParameters['unpaged'] = requestParameters.unpaged;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/authors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageAuthorDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAuthors(requestParameters: GetAuthorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageAuthorDto> {
        const response = await this.getAuthorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAuthorsNamesRaw(requestParameters: GetAuthorsNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/authors/names`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getAuthorsNames(requestParameters: GetAuthorsNamesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getAuthorsNamesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAuthorsRolesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/authors/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getAuthorsRoles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getAuthorsRolesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getAuthorsV1Raw(requestParameters: GetAuthorsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AuthorDto>>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.libraryId !== undefined) {
            queryParameters['library_id'] = requestParameters.libraryId;
        }

        if (requestParameters.collectionId !== undefined) {
            queryParameters['collection_id'] = requestParameters.collectionId;
        }

        if (requestParameters.seriesId !== undefined) {
            queryParameters['series_id'] = requestParameters.seriesId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/authors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AuthorDtoFromJSON));
    }

    /**
     */
    async getAuthorsV1(requestParameters: GetAuthorsV1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AuthorDto>> {
        const response = await this.getAuthorsV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBookTagsRaw(requestParameters: GetBookTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Set<string>>> {
        const queryParameters: any = {};

        if (requestParameters.seriesId !== undefined) {
            queryParameters['series_id'] = requestParameters.seriesId;
        }

        if (requestParameters.readlistId !== undefined) {
            queryParameters['readlist_id'] = requestParameters.readlistId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tags/book`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getBookTags(requestParameters: GetBookTagsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Set<string>> {
        const response = await this.getBookTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGenresRaw(requestParameters: GetGenresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Set<string>>> {
        const queryParameters: any = {};

        if (requestParameters.libraryId !== undefined) {
            queryParameters['library_id'] = requestParameters.libraryId;
        }

        if (requestParameters.collectionId !== undefined) {
            queryParameters['collection_id'] = requestParameters.collectionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/genres`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getGenres(requestParameters: GetGenresRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Set<string>> {
        const response = await this.getGenresRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLanguagesRaw(requestParameters: GetLanguagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Set<string>>> {
        const queryParameters: any = {};

        if (requestParameters.libraryId !== undefined) {
            queryParameters['library_id'] = requestParameters.libraryId;
        }

        if (requestParameters.collectionId !== undefined) {
            queryParameters['collection_id'] = requestParameters.collectionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/languages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getLanguages(requestParameters: GetLanguagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Set<string>> {
        const response = await this.getLanguagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPublishersRaw(requestParameters: GetPublishersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Set<string>>> {
        const queryParameters: any = {};

        if (requestParameters.libraryId !== undefined) {
            queryParameters['library_id'] = requestParameters.libraryId;
        }

        if (requestParameters.collectionId !== undefined) {
            queryParameters['collection_id'] = requestParameters.collectionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/publishers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getPublishers(requestParameters: GetPublishersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Set<string>> {
        const response = await this.getPublishersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSeriesReleaseDatesRaw(requestParameters: GetSeriesReleaseDatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Set<string>>> {
        const queryParameters: any = {};

        if (requestParameters.libraryId !== undefined) {
            queryParameters['library_id'] = requestParameters.libraryId;
        }

        if (requestParameters.collectionId !== undefined) {
            queryParameters['collection_id'] = requestParameters.collectionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/series/release-dates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getSeriesReleaseDates(requestParameters: GetSeriesReleaseDatesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Set<string>> {
        const response = await this.getSeriesReleaseDatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSeriesTagsRaw(requestParameters: GetSeriesTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Set<string>>> {
        const queryParameters: any = {};

        if (requestParameters.libraryId !== undefined) {
            queryParameters['library_id'] = requestParameters.libraryId;
        }

        if (requestParameters.collectionId !== undefined) {
            queryParameters['collection_id'] = requestParameters.collectionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tags/series`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getSeriesTags(requestParameters: GetSeriesTagsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Set<string>> {
        const response = await this.getSeriesTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSharingLabelsRaw(requestParameters: GetSharingLabelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Set<string>>> {
        const queryParameters: any = {};

        if (requestParameters.libraryId !== undefined) {
            queryParameters['library_id'] = requestParameters.libraryId;
        }

        if (requestParameters.collectionId !== undefined) {
            queryParameters['collection_id'] = requestParameters.collectionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/sharing-labels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getSharingLabels(requestParameters: GetSharingLabelsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Set<string>> {
        const response = await this.getSharingLabelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTagsRaw(requestParameters: GetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Set<string>>> {
        const queryParameters: any = {};

        if (requestParameters.libraryId !== undefined) {
            queryParameters['library_id'] = requestParameters.libraryId;
        }

        if (requestParameters.collectionId !== undefined) {
            queryParameters['collection_id'] = requestParameters.collectionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getTags(requestParameters: GetTagsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Set<string>> {
        const response = await this.getTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
